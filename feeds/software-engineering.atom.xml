<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Antoine Veuiller - Software Engineering</title><link href="https://aveuiller.github.io/" rel="alternate"></link><link href="https://aveuiller.github.io/feeds/software-engineering.atom.xml" rel="self"></link><id>https://aveuiller.github.io/</id><updated>2022-09-18T00:00:00+02:00</updated><entry><title>A Generic Approach to Troubleshooting</title><link href="https://aveuiller.github.io/troubleshooting_generic_approach.html" rel="alternate"></link><published>2022-09-18T00:00:00+02:00</published><updated>2022-09-18T00:00:00+02:00</updated><author><name>Antoine Veuiller</name></author><id>tag:aveuiller.github.io,2022-09-18:/troubleshooting_generic_approach.html</id><summary type="html">&lt;p&gt;This article aims to provide a baseline of investigation in case of a generic production incident&lt;/p&gt;</summary><content type="html">&lt;section id="availability-disclaimer"&gt;
&lt;h2&gt;Availability Disclaimer&lt;/h2&gt;
&lt;p&gt;This article can be found on other sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Medium: &lt;a class="reference external" href="https://aveuiller.medium.com/a-generic-approach-to-troubleshooting-dda764fbbb6"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dev.to: &lt;a class="reference external" href="https://dev.to/aveuiller/a-generic-approach-to-troubleshooting-14jp"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;When working with a production system, you may encounter errors at any point, originating either from an application or its underlying host.
While it may become natural for a seasoned engineer to pinpoint its origin, it can be overwhelming at times if you are unsure of where to look.&lt;/p&gt;
&lt;p&gt;This article aims to provide a generic framework to tackle production issues.
The framework will serve as a basis for any engineer aiming to learn about troubleshooting basics.
However, as with any generic framework, it may need adjustments for specific use cases.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="environment"&gt;
&lt;h2&gt;Environment&lt;/h2&gt;
&lt;p&gt;In this article, we consider that you are working on a project that already implements the &lt;a class="reference external" href="https://www.pagerduty.com/resources/learn/best-practices-for-monitoring/"&gt;best practices in terms of monitoring&lt;/a&gt;
so that you have access to sensible metrics, defined for instance through the &lt;a class="reference external" href="https://brendangregg.com/usemethod.html"&gt;USE Method&lt;/a&gt;.
Those metrics can be used to provide performance dashboards and declare alerts triggered in case of faulty or suspicious behavior.
For a more visual reference, the following diagram shows a basic monitoring architecture using &lt;a class="reference external" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;, &lt;a class="reference external" href="https://grafana.com/"&gt;Grafana&lt;/a&gt;, and &lt;a class="reference external" href="https://prometheus.io/docs/alerting/latest/alertmanager/"&gt;Alert Manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Basic Monitoring Environment" src="/images/posts/2022-09-18_troubleshooting_basics/Monitoring_Environment.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Upon the reception of an alert for an issue impacting a production service, the actions to take can be broken down into three steps: &lt;em&gt;Analysis&lt;/em&gt;, &lt;em&gt;Correction&lt;/em&gt;, and &lt;em&gt;Post-Mortem&lt;/em&gt;.
As some of the traces found or produced during the incident can be transient, it is recommended to keep track of any event and action that was taken on the production during the analysis and correction phases.
This will ease the post-mortem phase.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="analysis"&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;section id="explore-the-issue"&gt;
&lt;h3&gt;Explore The Issue&lt;/h3&gt;
&lt;p&gt;The first step when receiving an alert will be to find any known information about it.
Usually, a &lt;a class="reference external" href="https://www.pagerduty.com/resources/learn/what-is-a-runbook/"&gt;&lt;em&gt;Runbook&lt;/em&gt;&lt;/a&gt; will explain the reason why this alert fired and the steps to take to solve it.&lt;/p&gt;
&lt;p&gt;Even if the solution seems simple, you may want to find the scope of the problem.
Your response might differ if the issue is impacting one or hundreds of hosts.
Likewise, an issue crippling production will require a low response time to issue corrective action,
while a less critical issue, like a decrease in performance, may give you more time for analysis.&lt;/p&gt;
&lt;p&gt;While your production servers should behave in the same way,
in some cases you will need to investigate the error before being able to determine the actual number of impacted hosts.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="check-the-basic-metrics"&gt;
&lt;h3&gt;Check The Basic Metrics&lt;/h3&gt;
&lt;p&gt;If you have multiple hosts impacted, take one of them as an analysis host before you have a clear view of which metrics are important in the current case.
If you have the chance to have metrics exported to a dashboard, for instance through &lt;a class="reference external" href="https://github.com/prometheus/node_exporter"&gt;node-exporter&lt;/a&gt;,
you will be able to see the issue quite easily from the different indicators.
Otherwise, you will need to jump on the host and use the &lt;a class="reference external" href="https://linuxconfig.org/linux-basic-health-check-commands"&gt;usual tools&lt;/a&gt; to get more insights into the host's health.
In any case, you will be looking for issues with the CPU, RAM, Load, Disk, and Network.&lt;/p&gt;
&lt;p&gt;This first step will indicate if the issue is purely applicative, or if your server is over-used to some extent.
This will also help you reduce the scope of where to look further down the investigation.&lt;/p&gt;
&lt;p&gt;Regardless of the result of the previous check, you will need to look at the application-specific metrics,
both for performance through CPU and RAM usage, as well as applicative metrics such as response time, workload queues, and more.
You also need to check the applicative logs looking for anything that stands out of the ordinary.&lt;/p&gt;
&lt;p&gt;From there, if you have enough information to at least recognize the issue and perform a temporary corrective action,
you should go for it and fix the production as soon as possible before digging Further.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dive-deeper-into-the-application-metrics"&gt;
&lt;h3&gt;Dive Deeper into The Application Metrics&lt;/h3&gt;
&lt;p&gt;If you didn't find the root cause of the error yet, you need to dig into the application behavior and its interaction with the system.
This step is mostly dependent on the application, but there are some common checks that could show irregularities.&lt;/p&gt;
&lt;p&gt;On the system side, you can take a look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The network communications and connectivity (e.g.
&lt;a class="reference external" href="https://man7.org/linux/man-pages/man1/tcpdump.1.html"&gt;tcpdump&lt;/a&gt;,
&lt;a class="reference external" href="https://man7.org/linux/man-pages/man8/netstat.8.html"&gt;netstat&lt;/a&gt;,
&lt;a class="reference external" href="https://www.commandlinux.com/man-page/man1/telnet.1.html"&gt;telnet&lt;/a&gt;,
&lt;a class="reference external" href="https://www.commandlinux.com/man-page/man8/mtr.8.html"&gt;mtr&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Kernel and related logs (e.g.
&lt;a class="reference external" href="https://man7.org/linux/man-pages/man1/journalctl.1.html"&gt;journalctl&lt;/a&gt;,
&lt;a class="reference external" href="https://man7.org/linux/man-pages/man1/dmesg.1.html"&gt;dmesg&lt;/a&gt;, …)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the applicative side, you can take a look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The configuration through files and environment variables (e.g. &lt;a class="reference external" href="https://man7.org/linux/man-pages/man5/proc.5.html"&gt;/proc&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The opened file handles and connections (e.g. &lt;a class="reference external" href="https://man7.org/linux/man-pages/man8/lsof.8.html"&gt;lsof&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The system calls that are performed by the application (e.g. &lt;a class="reference external" href="https://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The application performances in a specific code path (e.g. &lt;a class="reference external" href="https://man7.org/linux/man-pages/man1/gdb.1.html"&gt;gdb&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/google/pprof"&gt;pprof&lt;/a&gt;, …).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="correction"&gt;
&lt;h2&gt;Correction&lt;/h2&gt;
&lt;section id="protect-the-production"&gt;
&lt;h3&gt;Protect The Production&lt;/h3&gt;
&lt;p&gt;It is important to protect production from the issue as soon as possible.
This can take many forms but usually, you will either implement a quick fix,
that will enable the instance to still run until a long-term solution is implemented,
or isolate the faulty application from the production pools.
The latter can be done for instance by redirecting the load-balancer flow to other instances.&lt;/p&gt;
&lt;p&gt;With orchestration solutions and stateless services,
it could be appealing to simply restart the application and use a brand-new instance.
This may work in some cases, but be sure to backup all data required for further investigation before doing so,
otherwise, you may end up in the same situation later.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implement-a-long-term-solution"&gt;
&lt;h3&gt;Implement a Long-Term Solution&lt;/h3&gt;
&lt;p&gt;Once the production is secured, you can catch your breath and start digging further into the data you collected to find the actual root cause of the alert that was triggered.
Even if the situation is stable for now, you may want to improve the overall code quality so the &lt;em&gt;future you&lt;/em&gt; don't have to investigate this issue again.&lt;/p&gt;
&lt;p&gt;This section is entirely specific to the encountered issue, the actual fix could range from host configuration or code update to a complete architectural refactor in some cases.
I would advise performing the long-term fix as soon as possible, but you may be compelled to write down the Post-Mortem beforehand if the fix is big or impacts multiple components.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="post-mortem"&gt;
&lt;h2&gt;Post-Mortem&lt;/h2&gt;
&lt;section id="write-the-actual-post-mortem"&gt;
&lt;h3&gt;Write The Actual Post-Mortem&lt;/h3&gt;
&lt;p&gt;The main point of a &lt;a class="reference external" href="https://sre.google/sre-book/postmortem-culture/"&gt;Post-Mortem&lt;/a&gt; is to hold all relevant events and actions that took place during the incident.
This helps to understand the issue and improve the response process for future incidents.
It also helps fellow engineers to map potential side effects they experienced to the main incident.&lt;/p&gt;
&lt;p&gt;On top of the precise timeline, you need to describe the actual root cause from which the incident originates and the action you and your team are proposing to avoid this issue from recurring.
In case of a corrective action impacting multiple components, you will need to have this post-mortem reviewed by the right stakeholders before taking action.
The post-mortem should hold enough information for a peer to have a strong opinion about the proposal.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="improve-runbooks-and-alerts"&gt;
&lt;h3&gt;Improve Runbooks And Alerts&lt;/h3&gt;
&lt;p&gt;Depending on the corrective action you took, you may need to create new alerts to cover different edge cases and modify the runbook sections with up-to-date data.&lt;/p&gt;
&lt;p&gt;Even if the changes you performed are trivial, use this step as a feedback loop on the data you were missing during the investigation to help the &lt;em&gt;future you&lt;/em&gt; during the next investigation.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article aims to provide a baseline of investigation in case of a generic production incident.
The procedure will not show you the error if you don't ask the right questions but defines a framework to help you find the right questions to ask, and where to write the answers.&lt;/p&gt;
&lt;p&gt;As a picture is worth a thousand words, here is a summary of the article through a simple flow chart.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Troubleshooting Operations Flowchart" src="/images/posts/2022-09-18_troubleshooting_basics/Generic_Troubleshooting_Guide.svg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Sarra Habchi for the review&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;</content><category term="Software Engineering"></category><category term="Best Practice"></category><category term="System Engineering"></category></entry><entry><title>Apache Kafka: Apprentice Cookbook</title><link href="https://aveuiller.github.io/kafka_apprentice_cookbook.html" rel="alternate"></link><published>2021-06-29T00:00:00+02:00</published><updated>2021-06-29T00:00:00+02:00</updated><author><name>Antoine Veuiller</name></author><id>tag:aveuiller.github.io,2021-06-29:/kafka_apprentice_cookbook.html</id><summary type="html">&lt;p&gt;Apache Kafka is a distributed event streaming platform built over strong concepts. Let's dive into the possibilities it offers.&lt;/p&gt;</summary><content type="html">&lt;section id="availability-disclaimer"&gt;
&lt;h2&gt;Availability Disclaimer&lt;/h2&gt;
&lt;p&gt;This article can be found on other sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Hacker Noon: &lt;a class="reference external" href="https://hackernoon.com/the-apprentices-guide-to-apache-kafka-n31w35ef"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Medium: &lt;a class="reference external" href="https://aveuiller.medium.com/557439273cee"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dev.to: &lt;a class="reference external" href="https://dev.to/aveuiller/apache-kafka-apprentice-cookbook-26m"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;img alt="Apache Kafka Logo" src="/images/posts/2021-06-01_Kafka-Apprentice-Cookbook/kafka_logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Apache Kafka is a distributed event streaming platform built over strong concepts.
Let’s dive into the possibilities it offers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt; is a distributed event streaming platform built with an emphasis on reliability,
performance, and customization. Kafka can send and receive messages in a &lt;a class="reference external" href="https://aws.amazon.com/pub-sub-messaging/"&gt;publish-subscribe&lt;/a&gt; fashion.
To achieve this, the ecosystem relies on few but strong basic concepts,
which enable the community to build many features solving &lt;a class="reference external" href="https://kafka.apache.org/uses"&gt;numerous use cases&lt;/a&gt;, for instance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Processing messages as an &lt;a class="reference external" href="https://www.confluent.io/blog/apache-kafka-vs-enterprise-service-bus-esb-friends-enemies-or-frenemies/"&gt;Enterprise Service Bus&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tracking Activity, metrics, and telemetries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processing Streams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supporting &lt;a class="reference external" href="https://www.confluent.io/blog/event-sourcing-cqrs-stream-processing-apache-kafka-whats-connection/"&gt;Event sourcing&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing logs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article will see the concepts backing up Kafka and the different tools available to handle data streams.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="architecture"&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;The behaviour of Kafka is pretty simple: &lt;strong&gt;Producers&lt;/strong&gt; push &lt;em&gt;Messages&lt;/em&gt; into a particular &lt;em&gt;Topic&lt;/em&gt;,
and &lt;strong&gt;Consumers&lt;/strong&gt; subscribe to this &lt;em&gt;Topic&lt;/em&gt; to fetch and process the &lt;em&gt;Messages&lt;/em&gt;.
Let’s see how it is achieved by this technology.&lt;/p&gt;
&lt;section id="infrastructure-side"&gt;
&lt;h3&gt;Infrastructure side&lt;/h3&gt;
&lt;p&gt;Independently of the use, the following components will be deployed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;One or more &lt;strong&gt;Producers&lt;/strong&gt; sending messages to the brokers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more Kafka &lt;strong&gt;Brokers&lt;/strong&gt;, the actual messaging server handling communication between producers and consumers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more &lt;strong&gt;Consumers&lt;/strong&gt; fetching and processing messages, in clusters named &lt;strong&gt;Consumer Groups&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more &lt;a class="reference external" href="https://zookeeper.apache.org/"&gt;&lt;strong&gt;Zookeeper&lt;/strong&gt;&lt;/a&gt; instances managing the brokers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Optionally) One or more &lt;strong&gt;Registry&lt;/strong&gt; instances uniformizing message schema.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a scalable distributed system, Kafka is heavily relying on the concept of &lt;em&gt;clusters&lt;/em&gt;.
As a result, on typical production deployment, there will likely be multiple instances of each component.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;Consumer Group&lt;/strong&gt; is a cluster of the same consumer application.
This concept is heavily used by Kafka to balance the load on the applicative side of things.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kafka Architecture" src="/images/posts/2021-06-01_Kafka-Apprentice-Cookbook/kafka_architecture.svg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The dependency on Zookeeper will be removed soon, Cf.&lt;/em&gt; &lt;a class="reference external" href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum"&gt;&lt;em&gt;KIP-500&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kafka.apache.org/documentation/#majordesignelements"&gt;Design &amp;amp; Implementation Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://hackernoon.com/kafka-basics-and-core-concepts-explained-dd1434dv"&gt;Kafka Basics and Core Concepts: Explained  — Aritra Das&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="applicative-side"&gt;
&lt;h3&gt;Applicative side&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Message&lt;/strong&gt; in Kafka is a &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;key-value&lt;/span&gt;&lt;/span&gt; pair.
Those elements can be anything from an integer to a &lt;a class="reference external" href="https://developers.google.com/protocol-buffers"&gt;Protobuf message&lt;/a&gt;,
provided the right serializer and deserializer.&lt;/p&gt;
&lt;p&gt;The message is sent to a &lt;strong&gt;Topic&lt;/strong&gt;, which will store it as a &lt;strong&gt;Log&lt;/strong&gt;.
The topic should be a collection of logs semantically related, but without a particular structure imposed.
A topic can either keep every message as a new log entry or only keep the last value for each key
(a.k.a. &lt;a class="reference external" href="https://docs.confluent.io/platform/current/kafka/design.html#log-compaction"&gt;Compacted log&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To take advantage of the multiple brokers, topics are &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29"&gt;sharded&lt;/a&gt;
into &lt;strong&gt;Partitions&lt;/strong&gt; by default.
Kafka will assign any received message to one partition depending on its key,
or using &lt;a class="reference external" href="https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner"&gt;a partitioner algorithm&lt;/a&gt; otherwise,
which results in a random assignment from the developer's point of view.
Each partition has a &lt;strong&gt;Leader&lt;/strong&gt; responsible for all I/O operations, and &lt;strong&gt;Followers&lt;/strong&gt; replicating the data.
A follower will take over the leader role in case of an issue with the current one.&lt;/p&gt;
&lt;p&gt;The partition holds the received data in order, increasing an &lt;strong&gt;offset&lt;/strong&gt; integer for each message.
However, there is no order guarantee between two partitions.
So for order-dependent data, one must ensure that they end up in the same partition by using the same key.&lt;/p&gt;
&lt;p&gt;Each partition is assigned to a specific consumer from the consumer group.
This consumer is the only one fetching messages from this partition.
In case of shutdown of one customer, the brokers will &lt;a class="reference external" href="https://medium.com/streamthoughts/understanding-kafka-partition-assignment-strategies-and-how-to-write-your-own-custom-assignor-ebeda1fc06f3"&gt;reassign partitions&lt;/a&gt;
among the customers.&lt;/p&gt;
&lt;p&gt;Being an asynchronous system, it can be hard and impactful on the performances to have every message delivered exactly one time to the consumer.
To mitigate this, Kafka provides &lt;a class="reference external" href="https://kafka.apache.org/documentation/#semantics"&gt;different levels of guarantee&lt;/a&gt;
on the number of times a message will be processed (&lt;em&gt;i.e.&lt;/em&gt; at most once, at least once, exactly once).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://towardsdatascience.com/log-compacted-topics-in-apache-kafka-b1aa1e4665a7"&gt;Log Compacted Topics in Apache Kafka — Seyed Morteza Mousavi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=Vo6Mv5YPOJU&amp;amp;amp;list=PLa7VYi0yPIH0KbnJQcMv5N9iW8HkZHztH&amp;amp;amp;index=5"&gt;(Youtube) Apache Kafka 101: Replication — Confluent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Replication"&gt;Replication Design Doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;andy.bryant/processing-guarantees-in-kafka-12dd2e30be0e"&gt;Processing Guarantees in Details — Andy Briant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="schema-and-registry"&gt;
&lt;h3&gt;Schema and Registry&lt;/h3&gt;
&lt;p&gt;Messages are serialized when quitting a producer and deserialized when handled by the consumer.
To ensure compatibility, both must be using the same data definition.
Ensuring this can be hard considering the application evolution.
As a result, when dealing with a production system, it is recommended to use a schema to explicit a contract on the data structure.&lt;/p&gt;
&lt;p&gt;To do this, Kafka provides a &lt;strong&gt;Registry&lt;/strong&gt; server, storing and binding schema to topics.
Historically only &lt;a class="reference external" href="https://avro.apache.org/docs/current/"&gt;Avro&lt;/a&gt; was available, but the registry is now modular and can also handle
&lt;a class="reference external" href="https://json-schema.org/"&gt;JSON&lt;/a&gt; and &lt;a class="reference external" href="https://developers.google.com/protocol-buffers"&gt;Protobuf&lt;/a&gt; out of the box.&lt;/p&gt;
&lt;p&gt;Once a producer sent a schema describing the data handled by its topic to the registry, other parties
(&lt;em&gt;i.e.&lt;/em&gt; brokers and consumers) will fetch this schema on the registry to validate and deserialize the data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/schema-registry/index.html"&gt;Schema Registry Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://aseigneurin.github.io/2018/08/02/kafka-tutorial-4-avro-and-schema-registry.html"&gt;Kafka tutorial #4-Avro and the Schema Registry— Alexis Seigneurin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#serializer-and-formatter"&gt;Serializer-Deserializer for Schema&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="integrations"&gt;
&lt;h2&gt;Integrations&lt;/h2&gt;
&lt;p&gt;Kafka provides multiple ways of connecting to the brokers,
and each can be more useful than the others depending on the needs.
As a result, even if a library is an abstraction layer above another, it is not necessarily better for every use case.&lt;/p&gt;
&lt;section id="kafka-library"&gt;
&lt;h3&gt;Kafka library&lt;/h3&gt;
&lt;p&gt;There are client libraries available in &lt;a class="reference external" href="https://docs.confluent.io/platform/current/clients/index.html"&gt;numerous languages&lt;/a&gt;
which help develop a producer and consumer easily.
We will use Java for the example below, but the concept remains identical for other languages.&lt;/p&gt;
&lt;p&gt;The producer concept is to publish messages at any moment, so the code is pretty simple.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class Main {
  public static void main(String[] args) throws Exception {
    // Configure your producer
    Properties producerProperties = new Properties();
    producerProperties.put(&amp;quot;bootstrap.servers&amp;quot;, &amp;quot;localhost:29092&amp;quot;);
    producerProperties.put(&amp;quot;acks&amp;quot;, &amp;quot;all&amp;quot;);
    producerProperties.put(&amp;quot;retries&amp;quot;, 0);
    producerProperties.put(&amp;quot;linger.ms&amp;quot;, 1);
    producerProperties.put(&amp;quot;key.serializer&amp;quot;, &amp;quot;org.apache.kafka.common.serialization.LongSerializer&amp;quot;);
    producerProperties.put(&amp;quot;value.serializer&amp;quot;, &amp;quot;io.confluent.kafka.serializers.KafkaAvroSerializer&amp;quot;);
    producerProperties.put(&amp;quot;schema.registry.url&amp;quot;, &amp;quot;http://localhost:8081&amp;quot;);
    
    // Initialize a producer
    Producer&amp;lt;Long, AvroHelloMessage&amp;gt; producer = new KafkaProducer&amp;lt;&amp;gt;(producerProperties);
    
    // Use it whenever you need
    producer.send(new AvroHelloMessage(1L, &amp;quot;this is a message&amp;quot;, 2.4f, 1));
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is a bit more complex on the consumer part since the consumption loop needs to be created manually.
On the other hand, this gives more control over its behaviour.
The consumer state is automatically handled by the Kafka library.
As a result, restarting the worker will start at the most recent offset he encountered.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class Main {
    public static Properties configureConsumer() {
        Properties consumerProperties = new Properties();

        consumerProperties.put(&amp;quot;bootstrap.servers&amp;quot;, &amp;quot;localhost:29092&amp;quot;);
        consumerProperties.put(&amp;quot;group.id&amp;quot;, &amp;quot;HelloConsumer&amp;quot;);
        consumerProperties.put(&amp;quot;key.deserializer&amp;quot;, &amp;quot;org.apache.kafka.common.serialization.LongDeserializer&amp;quot;);
        consumerProperties.put(&amp;quot;value.deserializer&amp;quot;, &amp;quot;io.confluent.kafka.serializers.KafkaAvroDeserializer&amp;quot;);
        consumerProperties.put(&amp;quot;schema.registry.url&amp;quot;, &amp;quot;http://localhost:8081&amp;quot;);
        // Configure Avro deserializer to convert the received data to a SpecificRecord (i.e. AvroHelloMessage)
        // instead of a GenericRecord (i.e. schema + array of deserialized data).
        consumerProperties.put(KafkaAvroDeserializerConfig.SPECIFIC_AVRO_READER_CONFIG, true);

        return consumerProperties;
    }

    public static void main(String[] args) throws Exception {
        // Initialize a consumer
        final Consumer&amp;lt;Long, AvroHelloMessage&amp;gt; consumer = new KafkaConsumer&amp;lt;&amp;gt;(configureConsumer());

        // Chose the topics you will be polling from.
        // You can subscribe to all topics matching a Regex.
        consumer.subscribe(Pattern.compile(&amp;quot;hello_topic_avro&amp;quot;));

        // Poll will return all messages from the current consumer offset
        final AtomicBoolean shouldStop = new AtomicBoolean(false);
        Thread consumerThread = new Thread(() -&amp;gt; {
            final Duration timeout = Duration.ofSeconds(5);

            while (!shouldStop) {
                for (ConsumerRecord&amp;lt;Long, AvroHelloMessage&amp;gt; record : consumer.poll(timeout)) {
                    // Use your record
                    AvroHelloMessage value = record.value();
                }
                // Be kind to the broker while polling
                Thread.sleep(5);
            }

            consumer.close(timeout);
        });

        // Start consuming &amp;amp;&amp;amp; do other things
        consumerThread.start();
        // [...]

        // End consumption from customer
        shouldStop.set(true);
        consumerThread.join();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/clients/index.html"&gt;Available Libraries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/installation/configuration/producer-configs.html"&gt;Producer Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html"&gt;Consumer Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="kafka-streams"&gt;
&lt;h3&gt;Kafka Streams&lt;/h3&gt;
&lt;p&gt;Kafka Streams is built on top of the consumer library.
It continuously reads from a topic and processes the messages with code declared with a functional DSL.&lt;/p&gt;
&lt;p&gt;During the processing, transitional data can be kept in structures called &lt;a class="reference external" href="https://kafka.apache.org/23/javadoc/org/apache/kafka/streams/kstream/KStream.html"&gt;KStream&lt;/a&gt;
and &lt;a class="reference external" href="https://kafka.apache.org/23/javadoc/org/apache/kafka/streams/kstream/KTable.html"&gt;KTable&lt;/a&gt;,
which are stored into topics. The former is equivalent to a standard topic, and the latter to a compacted topic.
Using these data stores will enable automatic tracking of the worker state by Kafka, helping to get back on track in case of restart.&lt;/p&gt;
&lt;p&gt;The following code sample is extracted from the &lt;a class="reference external" href="https://kafka.apache.org/28/documentation/streams/tutorial"&gt;tutorial provided by Apache&lt;/a&gt;.
The code connects to a topic named &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;streams-plaintext-input&lt;/span&gt;&lt;/span&gt; containing strings values, without necessarily providing keys.
The few lines configuring the &lt;span class="docutils literal"&gt;StreamsBuilder&lt;/span&gt; will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Transform each message to lowercase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Split the result using whitespaces as a delimiter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Group previous tokens by value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Count the number of tokens for each group and save the changes to a KTable named &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;counts-store&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stream the changes in this Ktable to send the values in a KStream named &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;streams-wordcount-output&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class Main {
  public static void main(String[] args) throws Exception {
    Properties props = new Properties();
    props.put(StreamsConfig.APPLICATION_ID_CONFIG, &amp;quot;streams-wordcount&amp;quot;);
    props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, &amp;quot;localhost:29092&amp;quot;);
    props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
    props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());

    final StreamsBuilder builder = new StreamsBuilder();

    builder.&amp;lt;String, String&amp;gt;stream(&amp;quot;streams-plaintext-input&amp;quot;)
            .flatMapValues(value -&amp;gt; Arrays.asList(value.toLowerCase(Locale.getDefault()).split(&amp;quot;\\W+&amp;quot;)))
            .groupBy((key, value) -&amp;gt; value)
            .count(Materialized.&amp;lt;String, Long, KeyValueStore&amp;lt;Bytes, byte[]&amp;gt;&amp;gt;as(&amp;quot;counts-store&amp;quot;))
            .toStream()
            .to(&amp;quot;streams-wordcount-output&amp;quot;, Produced.with(Serdes.String(), Serdes.Long()));

    final Topology topology = builder.build();
    final KafkaStreams streams = new KafkaStreams(topology, props);
    final CountDownLatch latch = new CountDownLatch(1);

    // attach shutdown handler to catch control-c
    Runtime.getRuntime().addShutdownHook(new Thread(&amp;quot;streams-shutdown-hook&amp;quot;) {
      &amp;#64;Override
      public void run() {
        streams.close();
        latch.countDown();
      }
    });

    // The consumer loop is handled by the library
    streams.start();
    latch.await();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/streams/concepts.html"&gt;Kafka Streams Concepts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/streams/developer-guide/write-streams.html"&gt;Developer Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;andy.bryant/kafka-streams-work-allocation-4f31c24753cc"&gt;Kafka Stream Work Allocation — Andy Briant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="kafka-connect"&gt;
&lt;h3&gt;Kafka Connect&lt;/h3&gt;
&lt;p&gt;Kafka Connect provides a way of transforming and synchronizing data between almost any technology with the use of &lt;strong&gt;Connectors&lt;/strong&gt;.
Confluent is hosting a &lt;a class="reference external" href="https://www.confluent.io/hub/"&gt;Hub&lt;/a&gt;, on which users can share connectors for various technologies.
This means that integrating a Kafka Connect pipeline is most of the time only a matter of configuration, without code required.
A single connector can even handle both connection sides:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Populate a topic with data from any system: &lt;em&gt;i.e.&lt;/em&gt; a &lt;strong&gt;Source&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send data from a topic to any system: &lt;em&gt;i.e.&lt;/em&gt; a &lt;strong&gt;Sink&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source will read data from CSV files in the following schema then publish them into a topic.
Concurrently, the sink will poll from the topic and insert the messages into a MongoDB database.
Each connector can run in the same or a distinct worker, and workers can be grouped into a cluster for scalability.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kafka Connect Example" src="/images/posts/2021-06-01_Kafka-Apprentice-Cookbook/kafka_connect.png" /&gt;&lt;/p&gt;
&lt;p&gt;The connector instance is created through a configuration specific to the library.
The file below is a configuration of the &lt;a class="reference external" href="https://www.confluent.io/hub/mongodb/kafka-connect-mongodb"&gt;MongoDB connector&lt;/a&gt;.
It asks to fetch all messages from the topic &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;mongo-source&lt;/span&gt;&lt;/span&gt; to insert them into the collection &lt;span class="docutils literal"&gt;sink&lt;/span&gt; of the database named &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;kafka-connect&lt;/span&gt;&lt;/span&gt;.
The credentials are provided from an external file, which is a feature of Kafka Connect to &lt;a class="reference external" href="https://docs.confluent.io/platform/current/connect/security.html#externalizing-secrets"&gt;protect secrets&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code json literal-block"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongo-sink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;topics&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongo-source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tasks.max&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;connector.class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;com.mongodb.kafka.connect.MongoSinkConnector&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;connection.uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongodb://${file:/auth.properties:username}:${file:/auth.properties:password}&amp;#64;mongo:27017&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;database&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kafka_connect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;collection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;max.num.retries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;retries.defer.timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;document.id.strategy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;com.mongodb.kafka.connect.sink.processor.id.strategy.BsonOidStrategy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;post.processor.chain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;com.mongodb.kafka.connect.sink.processor.DocumentIdAdder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;delete.on.null.values&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;writemodel.strategy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneDefaultStrategy&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the configuration complete, registering the connector is as easy as an HTTP call on the running &lt;a class="reference external" href="https://docs.confluent.io/home/connect/userguide.html#configuring-and-running-workers"&gt;Kafka Connect instance&lt;/a&gt;.
Afterwards, the service will automatically watch the data without further work required.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept:application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type:application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;http://localhost:8083/connectors&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&amp;#64;sink-conf.json&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/connect/userguide.html#connect-userguide"&gt;Getting Started Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/connect/references/restapi.html"&gt;Connector Instance API Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLa7VYi0yPIH1MB2n2w8pMZguffCDu2L4Y"&gt;(Youtube) Tutorials Playlist — Confluent&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="ksql-database"&gt;
&lt;h3&gt;KSQL Database&lt;/h3&gt;
&lt;p&gt;Ksql is somehow equivalent to Kafka Streams, except that every transformation is declared in an SQL-like language.
The server is connected to the brokers and can create &lt;strong&gt;Streams&lt;/strong&gt; or &lt;strong&gt;Tables&lt;/strong&gt; from topics.
Those two concepts behave in the same way as a KStream or KTable from Kafka Streams (&lt;em&gt;i.e.&lt;/em&gt; respectively a topic and a compacted topic).&lt;/p&gt;
&lt;p&gt;There are three types of query in the language definition:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Persistent Query&lt;/strong&gt; (&lt;em&gt;e.g.&lt;/em&gt; &lt;span class="docutils literal"&gt;CREATE TABLE &amp;lt;name&amp;gt; WITH &lt;span class="pre"&gt;(...)&lt;/span&gt;&lt;/span&gt;): Creates a new stream or table that will be automatically updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull Query&lt;/strong&gt; (&lt;em&gt;e.g.&lt;/em&gt; &lt;span class="docutils literal"&gt;SELECT * FROM &amp;lt;table|stream&amp;gt; WHERE ID = 1&lt;/span&gt;): Behaves similarly to a standard DBMS. Fetches data as an instant snapshot and closes the connection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Push Query&lt;/strong&gt; (&lt;em&gt;e.g.&lt;/em&gt; &lt;span class="docutils literal"&gt;SELECT * FROM &amp;lt;table|stream&amp;gt; EMIT CHANGES&lt;/span&gt;): Requests a persistent connection to the server, asynchronously pushing updated values.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The database can be used to browse the brokers' content. Topics can be discovered through the command &lt;span class="docutils literal"&gt;list topics&lt;/span&gt;, and their content displayed using &lt;span class="docutils literal"&gt;print &amp;lt;name&amp;gt;&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code sql literal-block"&gt;&lt;code&gt;&lt;span class="n"&gt;ksql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;topics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="n"&gt;Kafka&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Topic&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Partitions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Partition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Replicas&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;----------------------------------------------------
&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello_topic_json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;----------------------------------------------------
&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;ksql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'hello_topic_json'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beginning&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KAFKA_BIGINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KAFKA_DOUBLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KAFKA_STRING&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KAFKA_STRING&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;rowtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;922&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;this is a message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;rowtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;967&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;this is another message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;rowtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;970&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;this is another message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The syntax to create and query a stream, or a table is very close to SQL.&lt;/p&gt;
&lt;pre class="code sql literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Let's create a table from the previous topic
&lt;/span&gt;&lt;span class="n"&gt;ksql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KAFKA_TOPIC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'hello_topic_json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VALUE_FORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'JSON'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;-- We can see the list and details of each table
&lt;/span&gt;&lt;span class="n"&gt;ksql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="k"&gt;Table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Kafka&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Topic&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Windowed&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;----------------------------------------------------------------------
&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MESSAGES&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello_topic_json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KAFKA&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;----------------------------------------------------------------------
&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;ksql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;describe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MESSAGES&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;------------------------------------------
&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USER_ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;------------------------------------------
&lt;/span&gt;&lt;span class="k"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;statistics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESCRIBE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXTENDED&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;-- Appart from some additions to the language, the queries are almost declared in standard SQL. 
&lt;/span&gt;&lt;span class="n"&gt;ksql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHANGES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;--------+------------------------+
&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;USER_ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;--------+------------------------+
&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kafka recommends using a &lt;a class="reference external" href="https://www.confluent.io/blog/deep-dive-ksql-deployment-options/"&gt;headless ksqlDB server&lt;/a&gt;
for production, with a file declaring all streams and tables to create.
This avoids any modification to the definitions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: ksqlDB servers can be grouped in a cluster like any other consumer.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further Reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/streams-ksql.html"&gt;Official Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.ksqldb.io/en/latest/concepts/queries/"&gt;KSQL Query Types In Details&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLa7VYi0yPIH2eX8q3mPpZAn3qCS1eDX8W"&gt;(Youtube) Tutorials Playlist — Confluent&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article gives a broad view of the Kafka ecosystem and possibilities, which are numerous.
This article only scratches the surface of each subject.
But worry not, as they are all well documented by Apache, Confluent, and fellow developers.
Here are a few supplementary resources to dig further into Kafka:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLa7VYi0yPIH0KbnJQcMv5N9iW8HkZHztH"&gt;(Youtube) Kafka Tutorials - &lt;em&gt;Confluent&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kafka-tutorials.confluent.io/"&gt;Kafka Tutorials in Practice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.confluent.io/blog/5-things-every-kafka-developer-should-know/"&gt;Top 5 Things Every Apache Kafka Developer Should Know — Bill Bejeck&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.confluent.io/platform/current/app-development/kafkacat-usage.html"&gt;Kafkacat user Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.confluent.io/blog/troubleshooting-ksql-part-2"&gt;Troubleshooting KSQL Part 2: What’s Happening Under the Covers? — Robin Moffatt&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://ssudan16.medium.com/kafka-internals-47e594e3f006"&gt;Apache Kafka Internals — sudan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The complete experimental code is available on my &lt;a class="reference external" href="https://github.com/aveuiller/frameworks-bootstrap/tree/master/Kafka"&gt;GitHub repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Sarra Habchi, and Dimitri Delabroye for the reviews&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;</content><category term="Software Engineering"></category><category term="Cheat sheet"></category><category term="Kafka"></category></entry><entry><title>Kubernetes: Apprentice Cookbook</title><link href="https://aveuiller.github.io/kubernetes_apprentice_cookbook.html" rel="alternate"></link><published>2021-05-10T00:00:00+02:00</published><updated>2021-05-10T00:00:00+02:00</updated><author><name>Antoine Veuiller</name></author><id>tag:aveuiller.github.io,2021-05-10:/kubernetes_apprentice_cookbook.html</id><summary type="html">&lt;p&gt;Kubernetes big picture and common use&lt;/p&gt;</summary><content type="html">&lt;section id="availability-disclaimer"&gt;
&lt;h2&gt;Availability Disclaimer&lt;/h2&gt;
&lt;p&gt;This article can be found on other sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Hacker Noon: &lt;a class="reference external" href="https://hackernoon.com/the-apprentices-guide-to-kubernetes-qp3k3443"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Medium: &lt;a class="reference external" href="https://medium.com/&amp;#64;aveuiller/kubernetes-apprentice-cookbook-90d8c11ccfc3"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dev.to: &lt;a class="reference external" href="https://dev.to/aveuiller/kubernetes-apprentice-cookbook-4j6h"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;img alt="Kubernetes Logo" src="/images/posts/2021-05-10_Kubernetes-Apprentice-Cookbook/kube_logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;You probably already heard of &lt;strong&gt;Kubernetes&lt;/strong&gt;, a powerful &lt;a class="reference external" href="https://www.redhat.com/en/topics/automation/what-is-orchestration"&gt;orchestrator&lt;/a&gt;
that will ease deployment and automatically manage your applications on a set of machines, called a &lt;em&gt;Cluster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With great power comes great complexity, &lt;a class="reference external" href="https://www.theregister.com/2021/02/25/google_kubernetes_autopilot/"&gt;even in the eyes of Google&lt;/a&gt;.
Thus, learning Kubernetes is oftentimes considered as cumbersome and complex, namely because of the number of new concepts you have to learn.
On the other hand, those very same concepts can be found in other orchestrators.
As a result, mastering them will ease your onboarding on other orchestrators, such as &lt;a class="reference external" href="https://docs.docker.com/engine/swarm/"&gt;Docker Swarm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The aim of this article is to explain the most used concepts of Kubernetes relying on basic system administration concepts,
then use some of these to deploy a simple web server and showcase the interactions between the different resources.
Lastly, I will lay out the usual CLI interactions while working with Kubernetes.&lt;/p&gt;
&lt;p&gt;This article mainly focuses on the developer side of a Kubernetes cluster, but I will leave some resources about cluster administration at the end.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="terminology-and-concepts"&gt;
&lt;h2&gt;Terminology and concepts&lt;/h2&gt;
&lt;section id="architecture"&gt;
&lt;h3&gt;Architecture&lt;/h3&gt;
&lt;p&gt;The Kubernetes realm is the &lt;strong&gt;cluster&lt;/strong&gt;, everything needed is contained within this cluster.
Inside it, you will find two types of nodes:
the &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/components/#control-plane-components"&gt;Control Plane&lt;/a&gt;
and the &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/architecture/nodes/"&gt;Worker Nodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;control plane&lt;/strong&gt; is a centralized set of processes that manages the cluster resources, load balance, health, and more.
A Kubernetes cluster usually has multiple controller nodes for availability and load balancing purposes.
As a developer, you will most likely interact through the API gateway for interactions.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;worker node&lt;/strong&gt; is any kind of host running a local Kubernetes agent &lt;a class="reference external" href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/"&gt;Kubelet&lt;/a&gt;
and a communication process &lt;a class="reference external" href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/"&gt;Kube-Proxy&lt;/a&gt;.
The former handles the operations commanded by the &lt;strong&gt;control plane&lt;/strong&gt; on the local container runtime (&lt;em&gt;e.g.&lt;/em&gt; docker),
while the latter redirects connectivity to the right pods.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kubernetes Architecture" src="/images/posts/2021-05-10_Kubernetes-Apprentice-Cookbook/kube_components.svg" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="namespaces"&gt;
&lt;h3&gt;Namespaces&lt;/h3&gt;
&lt;p&gt;After some time, a Kubernetes cluster may become huge and heavily used.
In order to keep things well organized, Kubernetes created the concept of &lt;strong&gt;Namespace&lt;/strong&gt;.
A namespace is basically a virtual cluster inside the actual cluster.&lt;/p&gt;
&lt;p&gt;Most of the resources will be contained inside a namespace, thus unaware of resources from other namespaces.
Only a few kinds of resources are completely agnostic of namespaces, and they define computational power or storage sources (&lt;em&gt;i.e.&lt;/em&gt; Nodes and PersistentVolumes).
However, access to those can be limited by namespace using &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/policy/resource-quotas/"&gt;Quotas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Namespace-aware resources will always be contained in a namespace as Kubernetes creates and uses a namespace named &lt;em&gt;default&lt;/em&gt; if nothing is specified.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Namespace Organization" src="/images/posts/2021-05-10_Kubernetes-Apprentice-Cookbook/kube_namespace.svg" /&gt;&lt;/p&gt;
&lt;p&gt;There is no silver bullet on the way to use namespaces, as it widely depends on your organization and needs.
However, we can note some usual namespaces usages:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Divide the cluster by team or project, to avoid naming conflict and help repartition of resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Divide the cluster by environment (&lt;em&gt;i.e.&lt;/em&gt; dev, staging, prod), to keep a consistent architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy with more granularity (&lt;em&gt;e.g.&lt;/em&gt; &lt;a class="reference external" href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;blue/green deployment&lt;/a&gt;), to quickly fall back on an untouched working environment in case of issue.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"&gt;Namespace Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"&gt;Manage The Cluster Namespaces&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="glossary"&gt;
&lt;h3&gt;Glossary&lt;/h3&gt;
&lt;p&gt;Kubernetes did a great work of remaining agnostic of any technology in their design.
This means two things:  &lt;a class="reference external" href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/"&gt;handle multiple technologies under the hood&lt;/a&gt;
and there is a whole new terminology to learn.&lt;/p&gt;
&lt;p&gt;Fortunately, these concepts are pretty straightforward and can most of the time be compared to a unit element of classic system infrastructure.
The table below will summarize the binding of the most basic concepts.
The comparison might not be a hundred per cent accurate but rather here to help understand the need behind each concept.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Abstraction Layer&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Physical Layer&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Uses Namespace&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/pods/"&gt;Pod&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Container&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Pod is the minimal work unit of Kubernetes, it is generally equivalent to one applicative container but it can be composed of multiple ones.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/"&gt;Replicaset&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Load Balancing&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A ReplicaSet keeps track of and maintain the amount of instances expected and running for a given pod.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;Deployment&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Deployment keeps track of and maintain the required configuration for a pod and replicaset.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSet&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A StatefulSet is a Deployment with insurance on the start order and volume binding, to keep state consistent in time.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/architecture/nodes/"&gt;Node&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Host&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;❌&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Node can be a physical or virtual machine that is ready to host pods.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;Service&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Network&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Service will define an entrypoint to a set of pods semantically tied together.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Reverse Proxy&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;An Ingress publishes Services outside the Cluster.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/architecture/cloud-controller/#design"&gt;Cluster&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Datacenter&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;❌&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Cluster is the set of available nodes, including the Kubernetes controllers.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"&gt;Namespace&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;➖&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Namespace defines an isolated pseudo cluster in the current cluster.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/storage/storage-classes/"&gt;StorageClass&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Disk&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;❌&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A StorageClass configures filesystems sources that can be used to dynamically create PersistentVolumes.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/"&gt;PersistentVolume&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Disk Partition&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;❌&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A PersistentVolume describe any kind of filesystem ready to be mounted on a pod.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"&gt;PersistentVolumeClaim&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A PersistentVolumeClaim binds a PersistentVolume to a pod, which can then actively use it while running.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/configmap/"&gt;ConfigMap&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Environment Variables&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A ConfigMap defines widely accessible properties.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secret&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Secured Env. Var.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;✅&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A Secret defines widely accessible properties with potential encryption and access limitations.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/glossary/?all=true"&gt;Official Kubernetes Glossary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/"&gt;Official Concepts Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="definition-files"&gt;
&lt;h2&gt;Definition files&lt;/h2&gt;
&lt;p&gt;The resources in Kubernetes are created in a declarative fashion, and while it is possible to configure your application deployment through the command line,
a good practice is to keep track of the resource definitions in a versioned environment.
Sometimes named &lt;a class="reference external" href="https://www.gitops.tech/"&gt;GitOps&lt;/a&gt;, this practice is not only applicable for Kubernetes but widely applied for delivery systems,
backed up by the &lt;a class="reference external" href="https://aws.amazon.com/devops/what-is-devops/"&gt;DevOps&lt;/a&gt; movement.&lt;/p&gt;
&lt;p&gt;To this effect, Kubernetes proposes a &lt;a class="reference external" href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;YAML&lt;/a&gt; representation of the resource declaration, and its structure can be summarized as follow:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Field&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;File type&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Content&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;apiVersion&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;All files&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Version to use while parsing the file.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;kind&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;All files&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Type of resource that the file is describing.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;metadata&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;All files&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Resource identification and labeling.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;data&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Data centric files (Secret, ConfigMap)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Content entry point for data mapping.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;spec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Most files (Pod, Deployment, Ingress, ...)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Content entry point for resource configuration.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Watch out: some resources such as StorageClass do no use a single entry point as described above&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-apiversion-definition-guide.html"&gt;Guide on apiVersion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://yaml.org/spec/1.2/spec.html"&gt;Yaml Specifications&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section id="metadata-and-labels"&gt;
&lt;h3&gt;Metadata and labels&lt;/h3&gt;
&lt;p&gt;The metadata entry is critical while creating any resource as it will enable Kubernetes and yourself to easily identify and select the resource.&lt;/p&gt;
&lt;p&gt;In this entry, you will define a &lt;span class="docutils literal"&gt;name&lt;/span&gt; and a &lt;span class="docutils literal"&gt;namespace&lt;/span&gt; (defaults to &lt;span class="docutils literal"&gt;default&lt;/span&gt;),
thanks to which the control plane will automatically be able to tell if the file is a new addition to the cluster or the revision of a previously loaded file.&lt;/p&gt;
&lt;p&gt;On top of those elements, you can define a &lt;span class="docutils literal"&gt;labels&lt;/span&gt; section.
It is composed of a set of key-value pairs to narrow down the context and content of your resource.
Those labels can later be used in almost any CLI commands through &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"&gt;Selectors&lt;/a&gt;.
As those entries are not used in the core behavior of Kubernetes,
you can use any name you want, even if Kubernetes defines some &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/"&gt;best practices recommendations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you can also create an &lt;span class="docutils literal"&gt;annotations&lt;/span&gt; section, which is almost identical to &lt;span class="docutils literal"&gt;labels&lt;/span&gt; but not used by Kubernetes at all.
Those can be used on the applicative side to trigger behaviors or simply add data to ease debugging.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# &amp;lt;metadata&amp;gt; narrows down selection and identify the resource&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# The &amp;lt;name&amp;gt; entry is required and used to identify the resource&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-resource&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-namespace-or-default&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;labels&amp;gt; is optional but often needed for resource selection&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;application-name&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;back&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;annotations&amp;gt; is optional and not needed for the configuration of Kubernetes&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;4.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names/"&gt;Naming and Identification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"&gt;Labels and Selectors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/"&gt;Annotations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="data-centric-configuration-files"&gt;
&lt;h3&gt;Data centric configuration files&lt;/h3&gt;
&lt;p&gt;Those files define key-value mappings that can be used later in other resources.
Usually, those resources (&lt;em&gt;i.e.&lt;/em&gt; Secrets and ConfigMap) are loaded before anything else,
as it is more likely than not that your infrastructure files are dependent on them.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;kind&amp;gt; defines the resource described in this file&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;ConfigMap&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;data&amp;gt; configures data to load&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;configuration_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;s&gt;&amp;quot;configuration_value&amp;quot;&lt;/s&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;properties_entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p-Indicator"&gt;|&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="no"&gt;# Any multiline content is accepted&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="no"&gt;multiline_config=true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="infrastructure-centric-configuration-files"&gt;
&lt;h3&gt;Infrastructure centric configuration files&lt;/h3&gt;
&lt;p&gt;Those files define the infrastructure to deploy on the cluster, potentially using content from the data files.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;kind&amp;gt; defines the resource described in this file&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Pod&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-web-server&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;spec&amp;gt; is a domain specific description of the resource.&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# The specification entries will be very different from one kind to another&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="resources-definition"&gt;
&lt;h2&gt;Resources definition&lt;/h2&gt;
&lt;p&gt;In this section, we will take a closer look at the configuration of the most used resources on a Kubernetes application.
This is also the occasion to showcase the interactions between resources.&lt;/p&gt;
&lt;p&gt;At the end of the section, we will have a running Nginx server and will be able to contact the server from outside the cluster.
The following diagram summarizes the intended state:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Intended Deployment" src="/images/posts/2021-05-10_Kubernetes-Apprentice-Cookbook/kube_nginx.svg" /&gt;&lt;/p&gt;
&lt;section id="configmap"&gt;
&lt;h3&gt;ConfigMap&lt;/h3&gt;
&lt;p&gt;ConfigMap is used to hold properties that can be used later in your resources.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;ConfigMap&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-config&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;configuration_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;s&gt;&amp;quot;Configuration&lt;/s&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;s&gt;value&amp;quot;&lt;/s&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration defined above can then be &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/configmap/#configmaps-and-pods"&gt;selected from another resource definition&lt;/a&gt; with the following snippet:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;configMapKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-config&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;configuration_key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: ConfigMaps are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/configmap/"&gt;ConfigMap Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="secret"&gt;
&lt;h3&gt;Secret&lt;/h3&gt;
&lt;p&gt;All sensitive data should be put in Secret files (e.g. API keys, passphrases, …).
By default, the data is simply held as base64 encoded values without encryption.
However, Kubernetes proposes ways of mitigating leakage risks by
&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/"&gt;integrating a Role-Based Access Control&lt;/a&gt;
or &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/"&gt;encrypting secrets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Secret file defines a &lt;span class="docutils literal"&gt;type&lt;/span&gt; key at its root, which can be used to add validation on the keys declared in the &lt;span class="docutils literal"&gt;data&lt;/span&gt; entry.
By default, the type is set to &lt;span class="docutils literal"&gt;Opaque&lt;/span&gt; which does not validate the entries at all.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Secret&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-secrets&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# Opaque &amp;lt;type&amp;gt; can hold generic secrets, so no validation will be done.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Opaque&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# Secrets should be encoded in base64&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;secret_configuration_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;s&gt;&amp;quot;c2VjcmV0IHZhbHVl&amp;quot;&lt;/s&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The secret defined above can then be &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables"&gt;selected from another resource definition&lt;/a&gt; with the following snippet:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;secretKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-secrets&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;secret_configuration_key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Secrets are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secrets Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/secret/#secret-types"&gt;Available Secret Types&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="pod"&gt;
&lt;h3&gt;Pod&lt;/h3&gt;
&lt;p&gt;A Pod definition file is pretty straightforward but can become pretty big due to the quantity of configuration available.
The &lt;span class="docutils literal"&gt;name&lt;/span&gt; and &lt;span class="docutils literal"&gt;image&lt;/span&gt; fields are the only mandatory ones, but you might commonly use:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;ports&lt;/span&gt; to define the ports to open on both the container and pod.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;env&lt;/span&gt; to define the environment variables to load on the container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;args&lt;/span&gt; and &lt;span class="docutils literal"&gt;entrypoint&lt;/span&gt; to customize the container startup sequence.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pods are usually not created as standalone resources on Kubernetes,
as the best practice indicates to &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/pods/#working-with-pods"&gt;use pod as part of higher level definition&lt;/a&gt;
(&lt;em&gt;e.g.&lt;/em&gt; Deployment).
In those cases, the Pod file's content will simply be embedded in the other resource's file.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Pod&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-web-server&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;containers&amp;gt; is a list of container definition to embed in the pod&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;web&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;nginx&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;web&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;80&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;TCP&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;SOME_CONFIG&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="c1"&gt;# Create a line &amp;quot;value: &amp;lt;config_entry&amp;gt;&amp;quot; from the ConfigMap data&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;configMapKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-config&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;configuration_key&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;SOME_SECRET&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="c1"&gt;# Create a line &amp;quot;value: &amp;lt;config_entry&amp;gt;&amp;quot; from the Secret data&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;secretKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-secrets&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;secret_configuration_key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Pods are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/pods/"&gt;Pod Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/"&gt;Advanced Pod Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#podspec-v1-core"&gt;Fields available in Pod &amp;lt;spec&amp;gt; entry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#container-v1-core"&gt;Fields available in Pod &amp;lt;containers&amp;gt; entry&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;The Deployment is generally used as the atomic working unit since it will automatically:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Create a pod definition based on the &lt;span class="docutils literal"&gt;template&lt;/span&gt; entry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a ReplicaSet on pods selected by the &lt;span class="docutils literal"&gt;selector&lt;/span&gt; entry, with the value of &lt;span class="docutils literal"&gt;replicas&lt;/span&gt; as a count of pods that should be running.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following file requests 3 instances of an Nginx server running at all times.
The file may look a bit heavy, but most of it is the Pod definition copied from above.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;apps/v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Deployment&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-web-server-deployment&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;webserver&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;selector&amp;gt; should retrieve the Pod defined below, and possibly more&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;matchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;webserver&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;nginx-ws-deployment&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;replicas&amp;gt; asks for 3 pods running in parallel at all time&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;3&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# The content of &amp;lt;template&amp;gt; is a Pod definition file, without &amp;lt;apiVersion&amp;gt; nor &amp;lt;kind&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;my-web-server&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;webserver&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;nginx-ws-deployment&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;web&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;nginx&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;web&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;containerPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;80&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;TCP&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;SOME_CONFIG&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="c1"&gt;# Create a line &amp;quot;value: &amp;lt;config_entry&amp;gt;&amp;quot; from the ConfigMap data&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nt"&gt;configMapKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-config&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;configuration_key&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;SOME_SECRET&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="c1"&gt;# Create a line &amp;quot;value: &amp;lt;config_entry&amp;gt;&amp;quot; from the Secret data&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;valueFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nt"&gt;secretKeyRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-secrets&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;secret_configuration_key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Deployments are only available in the namespace in which they are defined.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"&gt;Deployment Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="service"&gt;
&lt;h3&gt;Service&lt;/h3&gt;
&lt;p&gt;A pod might be deleted and recreated at any time.
When it occurs the pod's IP address will change, which could result in a loss of connection if you are directly contacting it.
To solve this issue, a Service provides a stable contact point to a set of Pods, while remaining agnostic of their state and configuration.
Usually, Pods are chosen to be part of a Service through a &lt;span class="docutils literal"&gt;selector&lt;/span&gt; entry, thus based on its &lt;span class="docutils literal"&gt;labels&lt;/span&gt;.
A Pod is selected if and only if all the labels in the selector are worn by the pod.&lt;/p&gt;
&lt;p&gt;There are three types of services that are acting quite differently, among which you can select using the type entry.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;ClusterIP&lt;/strong&gt; service is bound to an internal IP from the cluster, hence only internally reachable.
This is the type of service created by default and is suitable for binding different applications inside the same cluster.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;NodePort&lt;/strong&gt; service will bind a port (by default in range 30000 to 32767) on the nodes hosting the selected pods.
This enables you to contact the service directly through the node IP.
That also means that your service will be as accessible as the virtual or physical machines hosting those pods.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Using NodePort can pose security risks, as it enables a direct connection from outside the cluster.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;LoadBalancer&lt;/strong&gt; service will automatically create a &lt;a class="reference external" href="https://www.nginx.com/resources/glossary/load-balancing/"&gt;load balancer&lt;/a&gt;
instance from the cloud service provider on which the cluster is running.
This load balancer is created outside the cluster but will automatically be bound to the nodes hosting the selected pods.&lt;/p&gt;
&lt;p&gt;This is an easy way to expose your service but can end up being costly as each service will be managed by a single load balancer.&lt;/p&gt;
&lt;p&gt;If you are setting up your own Ingress as we will do here, you may want to use a &lt;span class="docutils literal"&gt;ClusterIp&lt;/span&gt; service, as other services are made for specific use cases.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Service&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-service-clusterip&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# ClusterIP is the default service &amp;lt;type&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;ClusterIP&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c1"&gt;# Select all pods declaring a &amp;lt;label&amp;gt; entry &amp;quot;app: webserver&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;webserver&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;http&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;TCP&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;port&amp;gt; is the port to bind on the service side&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;80&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;targetPort&amp;gt; is the port to bind on the Pod side&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;targetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Services are defined in a namespace but can be contacted from other namespaces.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;Service Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;In Depth Service Comparison&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"&gt;Create an External Load Balancer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="ingress"&gt;
&lt;h3&gt;Ingress&lt;/h3&gt;
&lt;p&gt;Ingress enables you to publish internal services without necessarily using a load balancer from cloud service providers.
You usually need only one ingress per namespace, where you can bind as many routing &lt;span class="docutils literal"&gt;rules&lt;/span&gt; and &lt;span class="docutils literal"&gt;backends&lt;/span&gt; as you want.
A backend will typically be an internally routed &lt;span class="docutils literal"&gt;ClusterIP&lt;/span&gt; service.&lt;/p&gt;
&lt;p&gt;Please note that Kubernetes does not handle ingress resources by itself and relies on third-party implementations.
As a result, you will have to choose and install an &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/"&gt;Ingress Controller&lt;/a&gt;
before using any ingress resource.
On the other hand, it makes the ingress resource customizable depending on the needs of your cluster.&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Ingress&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-ingress&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;# Using &amp;lt;host&amp;gt; redirects all request matching the given DNS name to this rule&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;s&gt;&amp;quot;*.minikube.internal&amp;quot;&lt;/s&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;/welcome&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;pathType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Prefix&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-service-clusterip&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;80&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;# All other requests will be redirected through this rule&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;/&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;pathType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;Prefix&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;simple-web-service-clusterip&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
                  &lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Ingresses are defined in the namespace but may contact services from other namespaces and are publicly accessible outside the cluster.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/"&gt;Available Ingress Controllers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/"&gt;Enable Ingress on Minikube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.github.io/ingress-nginx/examples/rewrite/"&gt;Nginx Ingress Annotations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="cli-usage"&gt;
&lt;h2&gt;CLI Usage&lt;/h2&gt;
&lt;section id="create-and-manage-resources"&gt;
&lt;h3&gt;Create and manage resources&lt;/h3&gt;
&lt;p&gt;This section showcases the basic CLI commands to manipulate resources.
As said before, while it is possible to manually manage resources, a better practice is to use files.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# &amp;lt;kind&amp;gt; is the type of resource to create (e.g. deployment, secret, namespace, quota, ...)
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;kind&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;name&amp;gt;&lt;span class="w"&gt;
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;edit&lt;span class="w"&gt;   &lt;/span&gt;&amp;lt;kind&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;name&amp;gt;&lt;span class="w"&gt;
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;kind&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;name&amp;gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# All those commands can be used through a description file.
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;resource&amp;gt;.yaml&lt;span class="w"&gt;
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;edit&lt;span class="w"&gt;   &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;resource&amp;gt;.yaml&lt;span class="w"&gt;
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;resource&amp;gt;.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To ease resources manipulations through files, you can reduce the interactions to the CLI to the two following commands:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create and update any resource
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;apply&lt;span class="w"&gt;   &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;resource&amp;gt;.yaml&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# Delete any resource
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt;  &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;resource&amp;gt;.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Further reading:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/"&gt;Managing Resources&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="monitor-and-debug"&gt;
&lt;h3&gt;Monitor and Debug&lt;/h3&gt;
&lt;section id="fetch-resources"&gt;
&lt;h4&gt;Fetch resources&lt;/h4&gt;
&lt;p&gt;You can see all resources running through the CLI using &lt;span class="docutils literal"&gt;kubectl get &amp;lt;kind&amp;gt;&lt;/span&gt;.
This command is pretty powerful and lets you filter the kind of resources to display or select the resources you want to see.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: if not specified, Kubernetes will work on the &lt;span class="docutils literal"&gt;default&lt;/span&gt; namespace. You can specify &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt; &amp;lt;namespace&amp;gt;&lt;/span&gt; to work on a specific namespace or &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/span&gt; to show every namespace.&lt;/em&gt;&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Fetch everything
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt;
&lt;/span&gt;NAME&lt;span class="w"&gt;                                            &lt;/span&gt;READY&lt;span class="w"&gt;   &lt;/span&gt;STATUS&lt;span class="w"&gt;    &lt;/span&gt;RESTARTS&lt;span class="w"&gt;   &lt;/span&gt;AGE&lt;span class="w"&gt;
&lt;/span&gt;pod/my-web-server-deployment-58c4fd887f-5vm2b&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/1&lt;span class="w"&gt;     &lt;/span&gt;Running&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;128m&lt;span class="w"&gt;
&lt;/span&gt;pod/my-web-server-deployment-58c4fd887f-gq6lr&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/1&lt;span class="w"&gt;     &lt;/span&gt;Running&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;128m&lt;span class="w"&gt;
&lt;/span&gt;pod/my-web-server-deployment-58c4fd887f-gs6qb&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/1&lt;span class="w"&gt;     &lt;/span&gt;Running&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;128m&lt;span class="w"&gt;

&lt;/span&gt;NAME&lt;span class="w"&gt;                                   &lt;/span&gt;TYPE&lt;span class="w"&gt;           &lt;/span&gt;CLUSTER-IP&lt;span class="w"&gt;       &lt;/span&gt;EXTERNAL-IP&lt;span class="w"&gt;   &lt;/span&gt;PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;AGE&lt;span class="w"&gt;
&lt;/span&gt;service/simple-web-service-clusterip&lt;span class="w"&gt;   &lt;/span&gt;ClusterIP&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.96.96.241&lt;span class="w"&gt;     &lt;/span&gt;&amp;lt;none&amp;gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;/TCP,443/TCP&lt;span class="w"&gt;               &lt;/span&gt;60m&lt;span class="w"&gt;
&lt;/span&gt;service/simple-web-service-lb&lt;span class="w"&gt;          &lt;/span&gt;LoadBalancer&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.108.182.232&lt;span class="w"&gt;   &lt;/span&gt;&amp;lt;pending&amp;gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;:31095/TCP,443:31940/TCP&lt;span class="w"&gt;   &lt;/span&gt;60m&lt;span class="w"&gt;
&lt;/span&gt;service/simple-web-service-np&lt;span class="w"&gt;          &lt;/span&gt;NodePort&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.101.77.203&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;none&amp;gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;:31899/TCP,443:31522/TCP&lt;span class="w"&gt;   &lt;/span&gt;60m&lt;span class="w"&gt;

&lt;/span&gt;NAME&lt;span class="w"&gt;                                       &lt;/span&gt;READY&lt;span class="w"&gt;   &lt;/span&gt;UP-TO-DATE&lt;span class="w"&gt;   &lt;/span&gt;AVAILABLE&lt;span class="w"&gt;   &lt;/span&gt;AGE&lt;span class="w"&gt;
&lt;/span&gt;deployment.apps/my-web-server-deployment&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;136m&lt;span class="w"&gt;

&lt;/span&gt;NAME&lt;span class="w"&gt;                                                  &lt;/span&gt;DESIRED&lt;span class="w"&gt;   &lt;/span&gt;CURRENT&lt;span class="w"&gt;   &lt;/span&gt;READY&lt;span class="w"&gt;   &lt;/span&gt;AGE&lt;span class="w"&gt;
&lt;/span&gt;replicaset.apps/my-web-server-deployment-58c4fd887f&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;128m&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# We can ask for more details
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;deployment&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wide&lt;span class="w"&gt;
&lt;/span&gt;NAME&lt;span class="w"&gt;                       &lt;/span&gt;READY&lt;span class="w"&gt;   &lt;/span&gt;UP-TO-DATE&lt;span class="w"&gt;   &lt;/span&gt;AVAILABLE&lt;span class="w"&gt;   &lt;/span&gt;AGE&lt;span class="w"&gt;    &lt;/span&gt;CONTAINERS&lt;span class="w"&gt;   &lt;/span&gt;IMAGES&lt;span class="w"&gt;  &lt;/span&gt;SELECTOR&lt;span class="w"&gt;
&lt;/span&gt;my-web-server-deployment&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;121m&lt;span class="w"&gt;   &lt;/span&gt;web&lt;span class="w"&gt;          &lt;/span&gt;nginx&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;webserver&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# Some resources are not visible using &amp;quot;all&amp;quot; but available
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;configmap&lt;span class="w"&gt;
&lt;/span&gt;NAME&lt;span class="w"&gt;                &lt;/span&gt;DATA&lt;span class="w"&gt;   &lt;/span&gt;AGE&lt;span class="w"&gt;
&lt;/span&gt;kube-root-ca.crt&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;38d&lt;span class="w"&gt;
&lt;/span&gt;simple-web-config&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;3h17m&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="dig-into-a-particular-resource"&gt;
&lt;h4&gt;Dig into a particular resource&lt;/h4&gt;
&lt;p&gt;This section will show you how to dig into resources.
Most of the required day-to-day operations are doable through the three following commands.&lt;/p&gt;
&lt;p&gt;The first command will give you the resource's complete configuration, using &lt;span class="docutils literal"&gt;kubectl describe &lt;span class="pre"&gt;&amp;lt;kind&amp;gt;/&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Let's describe the ingress for the sake of example
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;describe&lt;span class="w"&gt; &lt;/span&gt;ingress/simple-web-ingress&lt;span class="w"&gt;
&lt;/span&gt;Name:&lt;span class="w"&gt;             &lt;/span&gt;simple-web-ingress&lt;span class="w"&gt;
&lt;/span&gt;Namespace:&lt;span class="w"&gt;        &lt;/span&gt;default&lt;span class="w"&gt;
&lt;/span&gt;Address:&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.64.2&lt;span class="w"&gt;
&lt;/span&gt;Default&lt;span class="w"&gt; &lt;/span&gt;backend:&lt;span class="w"&gt;  &lt;/span&gt;default-http-backend:80&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;error:&lt;span class="w"&gt; &lt;/span&gt;endpoints&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default-http-backend&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;Rules:&lt;span class="w"&gt;
  &lt;/span&gt;Host&lt;span class="w"&gt;                 &lt;/span&gt;Path&lt;span class="w"&gt;  &lt;/span&gt;Backends&lt;span class="w"&gt;
  &lt;/span&gt;----&lt;span class="w"&gt;                 &lt;/span&gt;----&lt;span class="w"&gt;  &lt;/span&gt;--------&lt;span class="w"&gt;
  &lt;/span&gt;*.minikube.internal&lt;span class="w"&gt;
                       &lt;/span&gt;/welcome&lt;span class="w"&gt;   &lt;/span&gt;simple-web-service-clusterip:80&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4:80,172.17.0.5:80,172.17.0.6:80&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more...&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;*&lt;span class="w"&gt;
                       &lt;/span&gt;/&lt;span class="w"&gt;   &lt;/span&gt;simple-web-service-clusterip:80&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4:80,172.17.0.5:80,172.17.0.6:80&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;more...&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;Annotations:&lt;span class="w"&gt;           &lt;/span&gt;nginx.ingress.kubernetes.io/rewrite-target:&lt;span class="w"&gt; &lt;/span&gt;/&lt;span class="w"&gt;
&lt;/span&gt;Events:&lt;span class="w"&gt;
  &lt;/span&gt;Type&lt;span class="w"&gt;    &lt;/span&gt;Reason&lt;span class="w"&gt;  &lt;/span&gt;Age&lt;span class="w"&gt;                 &lt;/span&gt;From&lt;span class="w"&gt;                      &lt;/span&gt;Message&lt;span class="w"&gt;
  &lt;/span&gt;----&lt;span class="w"&gt;    &lt;/span&gt;------&lt;span class="w"&gt;  &lt;/span&gt;----&lt;span class="w"&gt;                &lt;/span&gt;----&lt;span class="w"&gt;                      &lt;/span&gt;-------&lt;span class="w"&gt;
  &lt;/span&gt;Normal&lt;span class="w"&gt;  &lt;/span&gt;UPDATE&lt;span class="w"&gt;  &lt;/span&gt;7m6s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x6&lt;span class="w"&gt; &lt;/span&gt;over&lt;span class="w"&gt; &lt;/span&gt;23h&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;nginx-ingress-controller&lt;span class="w"&gt;  &lt;/span&gt;Ingress&lt;span class="w"&gt; &lt;/span&gt;default/simple-web-ingress&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another important command is &lt;span class="docutils literal"&gt;kubectl logs &lt;span class="pre"&gt;&amp;lt;kind&amp;gt;/&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/span&gt;, as you might expect it shows you the resources' logs if applicable.
As the logs are produced by Pods,
running such a command on a resource above a Pod will dig through Kubernetes to display the logs of a randomly chosen Pod underneath it.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;logs&lt;span class="w"&gt; &lt;/span&gt;deployments/my-web-server-deployment&lt;span class="w"&gt;
&lt;/span&gt;Found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pods,&lt;span class="w"&gt; &lt;/span&gt;using&lt;span class="w"&gt; &lt;/span&gt;pod/my-web-server-deployment-755b499f77-4n5vn&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# [logs]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, it is sometimes useful to connect on a pod, you can do so with the command kubectl &lt;span class="docutils literal"&gt;exec &lt;span class="pre"&gt;-it&lt;/span&gt; &amp;lt;pod_name&amp;gt; &lt;span class="pre"&gt;--&lt;/span&gt; /bin/bash&lt;/span&gt;.
This will open an interactive shell on the pod, enabling you to interact with its content.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# As for logs, when called on any resource enclosing Pods,
# Kubernetes will randomly chose one to  execute the action
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-it&lt;span class="w"&gt; &lt;/span&gt;deployment/my-web-server-deployment&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;/bin/bash&lt;span class="w"&gt;
&lt;/span&gt;root&amp;#64;my-web-server-deployment-56c4554cf9-qwtm6:/#&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# [...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;During this article, we saw the fundamentals behind deploying and publishing stateless services using Kubernetes.
But you can do a lot more complex things with Kubernetes.
If you want to learn more about it, I can recommend you to look at these resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Read the &lt;a class="reference external" href="https://kubernetes.io/docs/reference/"&gt;Kubernetes reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install a sandbox locally with &lt;a class="reference external" href="https://kubernetes.io/fr/docs/setup/learning-environment/minikube/"&gt;Minikube&lt;/a&gt;, and play with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watch the video &lt;a class="reference external" href="https://youtu.be/X48VuDVv0do"&gt;Kubernetes Tutorial for Beginners - &lt;em&gt;TechWorld with Nana&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manually bootstrap a Kubernetes cluster: &lt;a class="reference external" href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;Kubernetes The Hard Way&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Incidentally, there are multiple subjects I could not deeply talk about in this article and that may be of interest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On the developer side:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/storage/volumes/"&gt;Volumes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSets&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/"&gt;Selectors&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;On the cluster administrator side:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Operators&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/"&gt;Access control&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/"&gt;Secret encryption&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/policy/resource-quotas/"&gt;Quotas&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/"&gt;Network Plugins&lt;/a&gt;
(&lt;em&gt;e.g.&lt;/em&gt; &lt;a class="reference external" href="https://github.com/contiv/vpp/blob/master/docs/ARCHITECTURE.md"&gt;VPP&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/weaveworks/weave"&gt;Weaveworks&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, if you are interested in the ecosystem around Kubernetes,
you may want to take a look at the following technologies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.openshift.com/blog/enterprise-kubernetes-with-openshift-part-one"&gt;Openshift&lt;/a&gt;
is wrapping Kubernetes with production friendly features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://helm.sh/"&gt;Helm&lt;/a&gt;
is a charts manager for Kubernetes helping improve re-usability of configuration files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://argoproj.github.io/argo-cd/"&gt;ArgoCD&lt;/a&gt;
is keeping your Kubernetes Cluster up to date with your configurations from Git.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="appendix"&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;section id="resources-repository"&gt;
&lt;h3&gt;Resources' repository&lt;/h3&gt;
&lt;p&gt;The resources definitions used in this article are available in the following &lt;a class="reference external" href="https://github.com/aveuiller/frameworks-bootstrap/tree/feat_integrate_kube/Kubernetes"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cli-equivalents-docker-and-kubernetes"&gt;
&lt;h3&gt;CLI equivalents - Docker and Kubernetes&lt;/h3&gt;
&lt;p&gt;Managing containers with Docker and pods with Kubernetes is very similar,
as you can see on the following table describing equivalent operations between both technologies.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Operation&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Docker&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Kubernetes&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Running containers&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;docker ps&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;kubectl get pods&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Configuration details&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;docker inspect &amp;lt;name&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;kubectl describe &amp;lt;name&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Show logs&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;docker logs &amp;lt;name&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;kubectl logs &amp;lt;name&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Enter container&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;docker exec &lt;span class="pre"&gt;-it&lt;/span&gt; &amp;lt;name&amp;gt; /bin/bash&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;kubectl exec &lt;span class="pre"&gt;-it&lt;/span&gt; &amp;lt;name&amp;gt; &lt;span class="pre"&gt;--&lt;/span&gt; /bin/bash&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Thanks to Sarra Habchi, Dimitri Delabroye, and Alexis Geffroy for the reviews&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</content><category term="Software Engineering"></category><category term="Cheat sheet"></category><category term="DevOps"></category><category term="Kubernetes"></category><category term="Cloud"></category></entry><entry><title>Spring Boot: Apprentice Cookbook</title><link href="https://aveuiller.github.io/spring_boot_apprentice_cookbook.html" rel="alternate"></link><published>2021-01-27T00:00:00+01:00</published><updated>2021-01-27T00:00:00+01:00</updated><author><name>Antoine Veuiller</name></author><id>tag:aveuiller.github.io,2021-01-27:/spring_boot_apprentice_cookbook.html</id><summary type="html">&lt;p&gt;Spring Boot cheat sheet to bootstrap an API&lt;/p&gt;</summary><content type="html">&lt;section id="availability-disclaimer"&gt;
&lt;h2&gt;Availability Disclaimer&lt;/h2&gt;
&lt;p&gt;This article can be found on other sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Medium: &lt;a class="reference external" href="https://medium.com/&amp;#64;aveuiller/spring-boot-apprentice-cookbook-61db5a3f6450"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;img alt="Spring Boot logo" src="https://cdn-images-1.medium.com/max/800/1*gxXLMIuJDHCH7fwIgEP1cg.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; is a web framework built on top of the framework &lt;a class="reference external" href="https://spring.io/projects/spring-framework"&gt;Spring&lt;/a&gt;. It is designed for easier use and quicker implementation. It does so by configuring the application and its environment as automatically as possible. As a newcomer, I can say that it makes the framework really easy to get into.&lt;/p&gt;
&lt;p&gt;My learning led me to read most of the &lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-structuring-your-code"&gt;reference documentation&lt;/a&gt;, which is well written and gives you a lot of insights into the internal behavior of Spring Boot. This documentation gives a lot of details, so this article aims to take the counter approach and pinpoint the concepts you will need to implement an API using Spring Boot. I will complement each section with a set of links to related documentation, may you want to dig further.&lt;/p&gt;
&lt;p&gt;As a side note, this document will be using version 2.4.2 of the framework, on a Java project using Gradle as the build system.
However, the information remains applicable to any compatible language and build system.&lt;/p&gt;
&lt;p&gt;This article will cover the following aspects of creating an API with Spring Boot:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Bootstrap the project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create REST endpoints&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handle errors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to a persistence layer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paginate the results&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test the application&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package the Application&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="bootstrap-the-project"&gt;
&lt;h2&gt;Bootstrap the project&lt;/h2&gt;
&lt;p&gt;This part may be the easiest, as Spring Boot is providing a package generator at &lt;a class="reference external" href="https://start.spring.io/"&gt;https://start.spring.io/&lt;/a&gt;. We can select all required modules and retrieve an archived project with the build system, dependencies, and main application class.&lt;/p&gt;
&lt;p&gt;Outside of this generator, to declare a RESTful API, our project should define the Spring Boot &lt;em&gt;starter web&lt;/em&gt; dependency.
The &lt;em&gt;starter&lt;/em&gt; dependencies are a set of ready to use features packaged by Spring Boot.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;&lt;code&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'org.springframework.boot'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'2.4.2'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application’s main method should be contained in any class, on which we should apply the annotation &lt;span class="docutils literal"&gt;&amp;#64;SpringBootApplication&lt;/span&gt;. This annotation is responsible for a lot of automatic configurations, namely the components injection and web server startup.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;SpringBootApplication
public class MyApplication {
    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Starting the server is as simple as using the embedded command &lt;span class="docutils literal"&gt;./gradlew bootRun&lt;/span&gt;.
The server will start, but we don’t have any endpoint to serve at the moment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-using-springbootapplication-annotation"&gt;&amp;#64;SpringBootApplication&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-starter"&gt;List of starter dependencies&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="create-a-rest-endpoint"&gt;
&lt;h2&gt;Create a REST endpoint&lt;/h2&gt;
&lt;p&gt;To create a controller, we simply have to annotate any class with &lt;span class="docutils literal"&gt;&amp;#64;RestController&lt;/span&gt;.
We can then configure any method inside this controller as an endpoint using &lt;span class="docutils literal"&gt;&amp;#64;RequestMapping&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="docutils literal"&gt;&amp;#64;RequestMapping&lt;/span&gt; help us configuring the endpoint by providing an URL, the HTTP verb, the expected data type, and more.
It can be applied both on a class and a method, the configurations applied on the class will be inherited by the methods underneath and the path concatenated.&lt;/p&gt;
&lt;p&gt;To control our endpoint status codes we will return a&lt;span class="docutils literal"&gt;ResponseEntity&lt;/span&gt;, holding both the response message and &lt;span class="docutils literal"&gt;HttpStatus&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;RestController
&amp;#64;RequestMapping(value = &amp;quot;/hello&amp;quot;,
        consumes = MediaType.ALL_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE)
public class HelloWorldController {
    
    &amp;#64;RequestMapping(value = &amp;quot;/world&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; index() {
        HashMap&amp;lt;String, String&amp;gt; output = new HashMap&amp;lt;&amp;gt;();
        output.put(&amp;quot;message&amp;quot;, &amp;quot;Hello World!&amp;quot;);
        return new ResponseEntity&amp;lt;&amp;gt;(output, HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;span class="docutils literal"&gt;ResponseEntity&lt;/span&gt; will be automatically transformed to an HTTP response, using the &lt;span class="docutils literal"&gt;HttpStatus&lt;/span&gt; as response code and transforming the message to a JSON object.
On top of transforming &lt;em&gt;Maps&lt;/em&gt; to JSON objects, Spring Boot configure &lt;a class="reference external" href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt; to map all &lt;span class="docutils literal"&gt;public&lt;/span&gt; attributes or getters of any class to a JSON object.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/hello/world&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#getting-started-first-application-annotations"&gt;&amp;#64;RestController and &amp;#64;RequestMapping&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html"&gt;&amp;#64;RequestMapping API doc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-customize-the-jackson-objectmapper"&gt;Customize Json Serialization&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="advanced-endpoint-configuration"&gt;
&lt;h2&gt;Advanced endpoint configuration&lt;/h2&gt;
&lt;p&gt;Now that we have a controller, we may want to define dynamic HTTP endpoints. To do so, the main annotations to keep in mind are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;&amp;#64;RequestBody&lt;/span&gt; : Defines a body structure through a java Class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;&amp;#64;PathVariable&lt;/span&gt;: Defines a variable subpart of the endpoint URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class="docutils literal"&gt;&amp;#64;RequestParam&lt;/span&gt; : Defines a query parameter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The controller below showcases the three annotations with two endpoints, each returning a custom “Hello World” depending on the query.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;RestController
&amp;#64;RequestMapping(value = &amp;quot;/hello&amp;quot;,
        consumes = MediaType.ALL_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE)
public class HelloWorldController {
    
    // The behavior is not representative of a typical POST request
    // and only here as a matter of example.
    &amp;#64;RequestMapping(value = &amp;quot;&amp;quot;, method = RequestMethod.POST)
    public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; greetFromBody(&amp;#64;RequestBody HelloBody helloBody) {
        HashMap&amp;lt;String, String&amp;gt; output = new HashMap&amp;lt;&amp;gt;();
        output.put(&amp;quot;message&amp;quot;, &amp;quot;Hello &amp;quot; + helloBody.getName());
        return new ResponseEntity&amp;lt;&amp;gt;(output, HttpStatus.OK);
    }
        
    &amp;#64;RequestMapping(value = &amp;quot;/{name}&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; greet(&amp;#64;PathVariable String name,
                                                     &amp;#64;RequestParam(required = false,
                                                                   defaultValue = &amp;quot;0&amp;quot;) int amount_exclamation) {
        HashMap&amp;lt;String, String&amp;gt; output = new HashMap&amp;lt;&amp;gt;();
        StringBuilder b = new StringBuilder(&amp;quot;Hello &amp;quot;);
        b.append(name);
        for (int i = 0; i &amp;lt; amount_exclamation; i++) {
            b.append(&amp;quot;!&amp;quot;);
        }
        output.put(&amp;quot;message&amp;quot;, b.toString());
        return new ResponseEntity&amp;lt;&amp;gt;(output, HttpStatus.OK);
    }
}

class HelloBody {
    String name;

    public HelloBody() {
        // Used by Jackson
    }

    public String getName() {
        return this.name;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The endpoints defined above can be used as follows:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/hello/jack?amount_exclamation=4&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Hello jack!!!!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# -d automatically creates a POST request.
&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/hello&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{&amp;quot;name&amp;quot;: &amp;quot;Bob&amp;quot;}'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Hello Bob&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-requestbody"&gt;&amp;#64;RequestBody&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-requestmapping-uri-templates"&gt;&amp;#64;PathVariable&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-requestparam"&gt;&amp;#64;RequestParam&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="handle-errors"&gt;
&lt;h2&gt;Handle errors&lt;/h2&gt;
&lt;p&gt;By default, Spring Boot will return the HTTP code 200 for any successful request, 404 if the endpoint is not registered, and 500 for any error. We already saw that using &lt;span class="docutils literal"&gt;ResponseEntity&lt;/span&gt; enables us to override this behavior for successful requests, but we still need to handle error codes more finely.&lt;/p&gt;
&lt;p&gt;To do so, we will define custom API exceptions that will be automatically transformed into HTTP codes.
This transformation is done by a class extending &lt;span class="docutils literal"&gt;ResponseEntityExceptionHandler&lt;/span&gt; and annotated with &lt;span class="docutils literal"&gt;&amp;#64;ControllerAdvice&lt;/span&gt;.
In this class, we can define methods to handle exceptions using the annotations &lt;span class="docutils literal"&gt;&amp;#64;ExceptionHandler&lt;/span&gt; and &lt;span class="docutils literal"&gt;&amp;#64;ResponseStatus&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;ControllerAdvice
public class MyApplicationControllerAdvice extends ResponseEntityExceptionHandler {

    &amp;#64;ExceptionHandler(ApiException.class)
    &amp;#64;ResponseStatus(HttpStatus.BAD_REQUEST)
    public void handleBadRequest() {
    }

    &amp;#64;ExceptionHandler(NotFoundException.class)
    &amp;#64;ResponseStatus(HttpStatus.NOT_FOUND)
    public void handleNotFound() {
    }
}

public class ApiException extends Exception {
}

public class NotFoundException extends ApiException {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After defining the &lt;span class="docutils literal"&gt;ControllerAdvice&lt;/span&gt; in your project, any exception thrown by your controllers will be parsed and transformed to the bound &lt;span class="docutils literal"&gt;ResponseStatus&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;RestController
&amp;#64;RequestMapping(value = &amp;quot;/exception&amp;quot;)
public class ExceptionController {
    
    &amp;#64;RequestMapping(value = &amp;quot;/404&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; notFound() throws NotFoundException {
        throw new NotFoundException();
    }    
    
    &amp;#64;RequestMapping(value = &amp;quot;/400&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; badRequest() throws ApiException {
        throw new ApiException();
    }

    &amp;#64;RequestMapping(value = &amp;quot;/500&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; ise() throws Exception {
        throw new Exception();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/exception/500&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/exception/404&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/exception/400&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our exception handling is very simple and does not return any payload, but it is possible to implement exception parsing in the methods of &lt;span class="docutils literal"&gt;ResponseEntityExceptionHandler&lt;/span&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-error-handling"&gt;ResponseEntityExceptionHandler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-controller-advice"&gt;&amp;#64;ControllerAdvice&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-exceptionhandler"&gt;&amp;#64;ExceptionHandler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-exceptionhandler-return-values"&gt;&amp;#64;ResponseStatus&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="connect-to-a-persistence-layer"&gt;
&lt;h2&gt;Connect to a persistence layer&lt;/h2&gt;
&lt;section id="configuration"&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;To use a database, we will need the &lt;em&gt;Java Persistence API&lt;/em&gt; (JPA) package and the implementation of any persistence layer.
The former will install interface APIs, while the latter will provide the implementations and drivers.&lt;/p&gt;
&lt;p&gt;To pinpoint the minimal changes required to switch between two distinct databases, we will show the integration with both &lt;a class="reference external" href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; and &lt;a class="reference external" href="https://www.h2database.com/html/main.html"&gt;H2&lt;/a&gt; at the same time.
First, let’s declare our dependencies:&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'org.springframework.boot:spring-boot-starter-data-jpa'&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c1"&gt;// Dependencies to your used dbms&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'org.postgresql:postgresql:42.2.1'&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'com.h2database:h2:1.4.200'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second step is to configure the accesses in &lt;span class="docutils literal"&gt;application.properties&lt;/span&gt;. The property file is the first and the last time we will have to worry about our persistence configuration. In this file, the 3 lines commented out are the only part to change to switch from PostgreSQL to H2.&lt;/p&gt;
&lt;pre class="code properties literal-block"&gt;&lt;code&gt;&lt;span class="na"&gt;spring.datasource.username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;user&lt;/s&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="na"&gt;spring.datasource.password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;password&lt;/s&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="na"&gt;spring.datasource.generate-unique-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;true&lt;/s&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# Automatically create &amp;amp; update the database schema from code.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="na"&gt;spring.jpa.hibernate.ddl-auto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;update&lt;/s&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;#spring.datasource.url=jdbc:h2:mem:database_name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="na"&gt;spring.datasource.url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;jdbc:postgresql://localhost:5432/database_name&lt;/s&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;#spring.datasource.driver-class-name=org.h2.Driver&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="na"&gt;spring.datasource.driver-class-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;org.postgresql.Driver&lt;/s&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="na"&gt;spring.jpa.database-platform&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;s&gt;org.hibernate.dialect.PostgreSQL10Dialect&lt;/s&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-configure-datasource"&gt;Database configuration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#data-properties"&gt;Available properties&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="define-a-model"&gt;
&lt;h3&gt;Define a model&lt;/h3&gt;
&lt;p&gt;Defining a model is as simple as using annotations defined on &lt;a class="reference external" href="https://www.jcp.org/en/jsr/detail?id=317"&gt;JSR-317&lt;/a&gt;. These annotations are available through the package &lt;em&gt;javax.persistence,&lt;/em&gt; which is available through the JPA dependency.&lt;/p&gt;
&lt;p&gt;For instance, the code below creates a &lt;em&gt;Delivery&lt;/em&gt; entity. Our entity identifier is the field &lt;em&gt;id&lt;/em&gt;, which will be automatically initialized and increased on each new saved entity in the database thanks to the annotation &lt;span class="docutils literal"&gt;&amp;#64;GeneratedValue&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All attributes publicly available will be set into the JSON representation of the entity in the API responses.&lt;/em&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;Entity
&amp;#64;Table(name = &amp;quot;delivery&amp;quot;)
public class Delivery {
    &amp;#64;Id
    &amp;#64;GeneratedValue(strategy = GenerationType.AUTO)
    long id;

    &amp;#64;Column(nullable = false)
    &amp;#64;NotNull
    &amp;#64;Enumerated(EnumType.STRING)
    DeliveryState state;
    
    &amp;#64;Column(nullable = false)
    &amp;#64;NotNull
    String location;

    public Delivery() {
        // Used by Jackson2
    }

    public Delivery(&amp;#64;NotNull DeliveryState state, &amp;#64;NotNull String location) {
        this.state = state;
        this.location = location;
    }

    public long getId() {
        return id;
    }

    public DeliveryState getState() {
        return state;
    }

    public void setState(DeliveryState state) {
        this.state = state;
    }
    
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }
}

enum DeliveryState {
    PENDING, DELIVERING, WAITING_AT_ARRIVAL, RETURNING, RETURNED, PICKED_UP;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To ensure consistency of our data class, we applied &lt;span class="docutils literal"&gt;&amp;#64;NotNull&lt;/span&gt; validations from &lt;a class="reference external" href="https://jcp.org/en/jsr/detail?id=303"&gt;JSR-303&lt;/a&gt;, these validations can be enforced on endpoints as we will see during the next section.
The constraints are contained in the package &lt;em&gt;javax.validation.constraints&lt;/em&gt;, available through the dependency &lt;span class="docutils literal"&gt;&lt;span class="pre"&gt;spring-boot-starter-validation&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'org.springframework.boot:spring-boot-starter-validation'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-entity-classes"&gt;Entity Declaration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://javaee.github.io/javaee-spec/javadocs/javax/persistence/package-summary.html"&gt;javax.persistence API documentation (&amp;#64;Entity, &amp;#64;Column, &amp;#64;Enumerate, …)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://javaee.github.io/javaee-spec/javadocs/javax/persistence/GeneratedValue.html"&gt;&amp;#64;GeneratedValue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/package-summary.html"&gt;javax.validation.constraints API documentation (&amp;#64;NotNull)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="expose-the-model"&gt;
&lt;h3&gt;Expose the model&lt;/h3&gt;
&lt;p&gt;To interact with our models, we have to define a &lt;a class="reference external" href="https://docs.spring.io/spring-data/commons/docs/2.4.2/api/org/springframework/data/repository/Repository.html"&gt;Repository&lt;/a&gt;, for instance, a &lt;span class="docutils literal"&gt;CrudRepository&lt;/span&gt;.
Doing so is as easy as extending the class with an empty class. Spring Boot will automatically implement functions to interact with the entity.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;Repository
public interface DeliveryRepository extends CrudRepository&amp;lt;Delivery, Long&amp;gt; {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We annotate this component &lt;span class="docutils literal"&gt;&amp;#64;Repository&lt;/span&gt; to make it available to dependency injection.
Then we can inject and use the repository in any class, for example directly in a controller.
Using&lt;span class="docutils literal"&gt;&amp;#64;Autowired&lt;/span&gt; will automatically retrieve the &lt;span class="docutils literal"&gt;&amp;#64;Repository&lt;/span&gt; declared above_._&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; &lt;span class="docutils literal"&gt;_&amp;#64;Repository_&lt;/span&gt; &lt;em&gt;and&lt;/em&gt; &lt;span class="docutils literal"&gt;_&amp;#64;Service_&lt;/span&gt; &lt;em&gt;behave exactly as the main injection annotation&lt;/em&gt;&lt;span class="docutils literal"&gt;_&amp;#64;Component_&lt;/span&gt;&lt;em&gt;, it simply enables to mark a semantic difference.&lt;/em&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;RestController
&amp;#64;RequestMapping(value = &amp;quot;/delivery&amp;quot;,
        consumes = MediaType.APPLICATION_JSON_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE)
public class DeliveryController {

    private final DeliveryRepository deliveryRepository;

    &amp;#64;Autowired
    public DeliveryController(DeliveryRepository deliveryRepository) {
        this.deliveryRepository = deliveryRepository;
    }

    &amp;#64;RequestMapping(value = &amp;quot;&amp;quot;, method = RequestMethod.POST)
    public ResponseEntity&amp;lt;Delivery&amp;gt; post(&amp;#64;Valid &amp;#64;RequestBody Delivery delivery) throws ApiException {
        try {
            delivery = deliveryRepository.save(delivery);
        } catch (Exception e) {
            throw new ApiException();
        }
        return new ResponseEntity&amp;lt;&amp;gt;(delivery, HttpStatus.OK);
    }

    &amp;#64;RequestMapping(value = &amp;quot;/{id}&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Delivery&amp;gt; get(&amp;#64;PathVariable long id) throws ApiException {
        Optional&amp;lt;Delivery&amp;gt; delivery = deliveryRepository.findById(id);
        if (delivery.isEmpty()) {
            throw new NotFoundException();
        }
        return new ResponseEntity&amp;lt;&amp;gt;(delivery.get(), HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used the annotation&lt;span class="docutils literal"&gt;&amp;#64;Valid&lt;/span&gt; to ensure that our constraints defined above are met on the sent &lt;em&gt;Delivery&lt;/em&gt; body.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/delivery&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{&amp;quot;state&amp;quot;: &amp;quot;PENDING&amp;quot;}'&lt;/span&gt;&lt;span class="w"&gt;                  
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="w"&gt; 

&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/delivery/1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="w"&gt; 

&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/delivery&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'{&amp;quot;state&amp;quot;: &amp;quot;PENDING&amp;quot;, &amp;quot;location&amp;quot;:&amp;quot;Budapest&amp;quot;}'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;PENDING&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Budapest&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/delivery/1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class="w"&gt;                                                                                 &lt;/span&gt;&lt;span class="m"&gt;130&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;↵&lt;span class="w"&gt;
&lt;/span&gt;HTTP/1.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;PENDING&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Budapest&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: H2 is an in-memory database so the data will be wiped out at each server restart.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation Links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-data/commons/docs/2.4.2/api/org/springframework/data/repository/CrudRepository.html"&gt;CrudRepository API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#using-boot-spring-beans-and-dependency-injection"&gt;Spring Component Declaration&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://javaee.github.io/javaee-spec/javadocs/javax/validation/package-summary.html"&gt;javax.validation API documentation (&amp;#64;Valid)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="paginate-the-results"&gt;
&lt;h2&gt;Paginate the results&lt;/h2&gt;
&lt;p&gt;This section illustrates how well Spring Boot integrates some classic features of a web API.
To paginate the access to our previous entity &lt;em&gt;Delivery,&lt;/em&gt; we simply have to change the repository’s extended class from &lt;span class="docutils literal"&gt;CrudRepository&lt;/span&gt; to &lt;span class="docutils literal"&gt;PagingAndSortingRepository&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;Repository
public interface DeliveryRepository extends PagingAndSortingRepository&amp;lt;Delivery, Long&amp;gt; {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This repository implementation provides a new method &lt;span class="docutils literal"&gt;findAll(Pageable)&lt;/span&gt; returning a &lt;span class="docutils literal"&gt;Page&lt;/span&gt;.
The class &lt;span class="docutils literal"&gt;Pageable&lt;/span&gt; configures the page and page size to return.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;RestController
&amp;#64;RequestMapping(value = &amp;quot;/delivery&amp;quot;,
        consumes = MediaType.APPLICATION_JSON_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE)
public class DeliveryController {

    private final DeliveryRepository deliveryRepository;

    &amp;#64;Autowired
    public DeliveryController(DeliveryRepository deliveryRepository) {
        this.deliveryRepository = deliveryRepository;
    }

    &amp;#64;RequestMapping(value = &amp;quot;&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;Page&amp;lt;Delivery&amp;gt;&amp;gt; index(&amp;#64;RequestParam(required = false, defaultValue = &amp;quot;0&amp;quot;) int page) {
        Pageable pageable = PageRequest.of(page, 50);
        return new ResponseEntity&amp;lt;&amp;gt;(deliveryRepository.findAll(pageable), HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The endpoint will then serve the whole &lt;span class="docutils literal"&gt;Page&lt;/span&gt; object’s data upon request.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8080/delivery&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;jq&lt;span class="w"&gt;                                                                                   &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;↵&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PENDING&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Budapest&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pageable&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sorted&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;false,&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unsorted&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;empty&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;offset&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pageNumber&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pageSize&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;paged&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unpaged&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;totalPages&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;totalElements&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sorted&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;false,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unsorted&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;true,&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;empty&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;numberOfElements&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;empty&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-data/commons/docs/2.4.2/api/org/springframework/data/repository/PagingAndSortingRepository.html"&gt;PagingAndSortingRepository API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-data/commons/docs/2.4.2/api/org/springframework/data/domain/PageRequest.html"&gt;PageRequest API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-data/commons/docs/2.4.2/api/org/springframework/data/domain/Page.html"&gt;Page API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="test-the-application"&gt;
&lt;h2&gt;Test the application&lt;/h2&gt;
&lt;p&gt;Spring Boot provides every tool to easily test controllers with a set of APIs and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mock_object"&gt;mocks&lt;/a&gt;.
Mostly, &lt;span class="docutils literal"&gt;MockMvc&lt;/span&gt; will enable us to send requests and assert response content without having to worry about technicalities.&lt;/p&gt;
&lt;p&gt;As an example, we are testing the &lt;em&gt;POST&lt;/em&gt; endpoint from the section above. One of these tests is successfully creating a &lt;em&gt;Delivery&lt;/em&gt; entity, and the second one simulates an error coming from the database.&lt;/p&gt;
&lt;p&gt;To avoid relying on a physical instance of a persistence layer, we injected our DeliveryRepository instance using &lt;span class="docutils literal"&gt;&amp;#64;MockBean&lt;/span&gt;, which creates and injects a mock of our component.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;&amp;#64;SpringBootTest
&amp;#64;AutoConfigureMockMvc
class DeliveryControllerTest {
    &amp;#64;Autowired
    private MockMvc mvc;

    &amp;#64;MockBean
    DeliveryRepository deliveryRepository;

    &amp;#64;Test
    void testPostDeliveryOk() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        Map&amp;lt;String, String&amp;gt; delivery = getValidDelivery();
        String body = mapper.writeValueAsString(delivery);
        MockHttpServletRequestBuilder accept =
                MockMvcRequestBuilders.post(&amp;quot;/delivery&amp;quot;)
                        .accept(MediaType.APPLICATION_JSON)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(body);
        mvc.perform(accept).andExpect(status().isOk());
    }

    &amp;#64;Test
    void testPostPersistIssue() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        Map&amp;lt;String, String&amp;gt; delivery = getValidDelivery();
        String body = mapper.writeValueAsString(delivery);
        Mockito.when(deliveryRepository.save(Mockito.any())).thenThrow(new RuntimeException());

        MockHttpServletRequestBuilder accept =
                MockMvcRequestBuilders.post(&amp;quot;/delivery&amp;quot;)
                        .accept(MediaType.APPLICATION_JSON)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(body);

        mvc.perform(accept).andExpect(status().is4xxClientError());
    }

    private Map&amp;lt;String, String&amp;gt; getValidDelivery() {
        Map&amp;lt;String, String&amp;gt; delivery = new HashMap&amp;lt;&amp;gt;();
        delivery.put(&amp;quot;state&amp;quot;, &amp;quot;PENDING&amp;quot;);
        delivery.put(&amp;quot;location&amp;quot;, &amp;quot;Rome&amp;quot;);
        return delivery;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-testing-spring-boot-applications"&gt;&amp;#64;SpringBootTest&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-testing-spring-boot-applications-testing-with-mock-environment"&gt;&amp;#64;AutoConfiguredMockMvc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-testing-spring-boot-applications-mocking-beans"&gt;&amp;#64;MockBean&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html"&gt;MockMvc api Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="package-the-application"&gt;
&lt;h2&gt;Package the application&lt;/h2&gt;
&lt;p&gt;Spring boot also eases the application packaging either as a standalone jar or a docker image.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;To create a ready to run &lt;em&gt;fat jar&lt;/em&gt;, execute &lt;span class="docutils literal"&gt;./gradlew bootJar&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To build a &lt;em&gt;docker image&lt;/em&gt;, execute &lt;span class="docutils literal"&gt;./gradlew bootBuildImage&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that docker does not like uppercase characters in the image name, but we can easily customize the image name and version.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Only use lowercase on docker image name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;named&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bootBuildImage&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
	&lt;/span&gt;&lt;span class="n"&gt;imageName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${rootProject.name.toLowerCase()}:${version}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Documentation links:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#getting-started-first-application-executable-jar"&gt;Create an application fat jar&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#boot-features-container-images"&gt;Configure Docker Image&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Spring Boot can be used with a handful of annotations and will manage most of the configuration for you.
However, most of the configuration can be overridden to provide your own behavior if necessary.
This makes it a good framework to design proof of concepts while keeping room for optimization if the project grows specific needs.&lt;/p&gt;
&lt;p&gt;If you want to know more about the framework, I can’t stress enough the quality of the &lt;a class="reference external" href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/"&gt;Reference Documentation&lt;/a&gt;, which gives really good details.&lt;/p&gt;
&lt;p&gt;If you want to play around with some code, you can find all those concepts on an example delivery API &lt;a class="reference external" href="https://github.com/aveuiller/frameworks-bootstrap/tree/master/SpringBoot"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;</content><category term="Software Engineering"></category><category term="Cheat sheet"></category><category term="Java"></category><category term="Spring Boot"></category></entry><entry><title>Introduction to Flaky Tests by Example</title><link href="https://aveuiller.github.io/introduction_to_flaky_tests_by_example.html" rel="alternate"></link><published>2020-08-10T00:00:00+02:00</published><updated>2020-08-10T00:00:00+02:00</updated><author><name>Antoine Veuiller</name></author><id>tag:aveuiller.github.io,2020-08-10:/introduction_to_flaky_tests_by_example.html</id><summary type="html">&lt;p&gt;Some real world examples of flaky tests&lt;/p&gt;</summary><content type="html">&lt;section id="availability-disclaimer"&gt;
&lt;h2&gt;Availability Disclaimer&lt;/h2&gt;
&lt;p&gt;This article can be found on other sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Medium: &lt;a class="reference external" href="https://medium.com/&amp;#64;aveuiller/stories-of-flaky-test-encounters-in-the-wild-a152bf7151f5"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;img alt="Flakiness effect" src="/images/posts/2020-08-10_Introduction-to-Flaky-Tests-by-Example/red_light.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Tests are an essential part of software development as they give a ground truth about the code sanity. As developers, we reasonably expect our unit tests to give the same results if the source code does not change. It can happen, however, that the result of a unit test changes over multiple executions of a test suite without any change in the code. Such a test is named a flaky test.&lt;/p&gt;
&lt;p&gt;A flaky test is not dangerous &lt;em&gt;per se&lt;/em&gt; but reduces the confidence a developer can give to his test suite, diminishing the benefits of the latter. It is thus recommended to eradicate such issue as soon as possible.&lt;/p&gt;
&lt;p&gt;However, depending on the origin of the flakiness, one may find out only a few days, months or even years later that the tests are flaky.
It may be hard to dive back into those and find the root causes, &lt;a class="reference external" href="https://martinfowler.com/articles/nonDeterminism.html"&gt;so usually, we tend to put those tests aside to make them less annoying or we rerun them until success&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fingers crossed" src="/images/posts/2020-08-10_Introduction-to-Flaky-Tests-by-Example/fingers_crossed.gif" /&gt;&lt;/p&gt;
&lt;p&gt;As a real-world example of flaky tests and the logic behind their resolution. I will talk about two interesting cases I had the opportunity to fix during my career.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="storytime"&gt;
&lt;h2&gt;Storytime!&lt;/h2&gt;
&lt;p&gt;During my career, I stumbled onto a couple of flaky tests issues. There are two instances that, in my opinion, are quite symptomatic of test flakiness, with quite different contexts.&lt;/p&gt;
&lt;p&gt;The examples are voluntary adapted to a simpler context than the original ones to keep a short and focused article.&lt;/p&gt;
&lt;section id="story-1-5-days-a-month-isnt-a-big-deal"&gt;
&lt;h3&gt;Story 1: 5 days a month isn’t a big deal&lt;/h3&gt;
&lt;p&gt;I entered a project where continuous integration was broken during the 5 first days of each month.
I was told that this wasn’t a big deal since we don’t need to deploy this project at the beginning of a month.
The priority of fixing those tests was so low that it has remained like this for years before we took the time to tackle this issue.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Store the data along with the input date&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# [...]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrieve_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Retrieve all data from lower date to now &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# [...]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_stats&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Compute some statistics about stored data&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'month'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retrieve_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_compute_stats&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Test method checking the behaviour of compute_stats&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;We retrieve the two data input&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The faulty feature was computing statistics about the current month. As the developer creating the initial tests wanted to take all cases into consideration, he created a test that gave as input multiple dates relative to the current &lt;em&gt;datetime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Among those inputs, one was &lt;em&gt;5 days before the current date,&lt;/em&gt; and the test was always computing the statistics as if it was part of the same month. As a result, it led to the tests being faulty at the beginning of each month. We can then imagine that the flakiness was detected under one to three weeks after the feature development and from then on, ignored.&lt;/p&gt;
&lt;p&gt;This test is time-dependent because &lt;em&gt;compute_stats&lt;/em&gt; will call for the date of analysis itself. As a result, the computation will always be dependent on the current date. One way of fixing such issues would be to sandbox the execution of the tests in order to control the current date.&lt;/p&gt;
&lt;p&gt;At first, we wanted to rely on &lt;a class="reference external" href="https://medium.com/swlh/about-design-patterns-dependency-injection-ab9c1742d4aa"&gt;dependency injection&lt;/a&gt; and make &lt;em&gt;compute_stats&lt;/em&gt; ask for a month to compute the statistics. This would create an easy way of sandboxing the execution and also potentially open the door to new features. However, in this project, this wasn’t trivial to implement because there was a lot of code dependent on this feature.&lt;/p&gt;
&lt;p&gt;Another way of doing so would be to inject the value directly to the method. Python has a very good library to sandbox the tests when using the built-in &lt;em&gt;datetime&lt;/em&gt; objects: &lt;a class="reference external" href="https://github.com/spulec/freezegun"&gt;freezegun&lt;/a&gt;. Once again, and unfortunately for us, the project was using &lt;a class="reference external" href="https://github.com/crsmithdev/arrow"&gt;arrow&lt;/a&gt; so this was not a possibility.&lt;/p&gt;
&lt;p&gt;Fortunately, and thanks to some previously well-thought environment on the project, we had a central method to provide the current date, which was initially intended to prevent the use of a wrong timezone.&lt;/p&gt;
&lt;p&gt;By mixing this method to the awesome &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html#the-patchers"&gt;patch decorator&lt;/a&gt; of python mock library (which is part of the standard &lt;em&gt;unittest&lt;/em&gt; library since 3.3), we solved the issue with a simple modification.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Store the data along with the input date&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# [...]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrieve_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower_date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Retrieve all data from lower date to now &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# [...]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compute_stats&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Compute some statistics about stored data&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'month'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retrieve_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_compute_stats&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;# Test method checking the behaviour of compute_stats&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;We retrieve the two data input&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By sandboxing the execution to a given point in time, we ensured the reproducibility of the build at any given time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="story-2-we-use-that-configuration"&gt;
&lt;h3&gt;Story 2: We use that configuration!&lt;/h3&gt;
&lt;p&gt;In another project, while creating a new feature we happened to break tests unrelated to our changes. This case could have been tedious to pinpoint, fortunately, due to the project organization, we were certain that the new feature did not affect the code covered by the now failing tests.&lt;/p&gt;
&lt;p&gt;The code below is a synthetic representation of what happened, a global &lt;em&gt;config&lt;/em&gt; object was interacting with both the existing and new features.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Global state configuration&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;existing_feature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;common_entry&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Not configured&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="c1"&gt;# Process [...]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;our_new_feature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;common_entry&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Not configured&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="c1"&gt;# Process [...]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the isolation of the two features, we knew that the new tests had to be the ones creating a faulty global state. There were globally two possibilities for the faulty state.
Either the new test was injecting something new to the global state, or removing something essential to the existing test.&lt;/p&gt;
&lt;p&gt;The test cases below were always run in the specific order &lt;em&gt;ConfiguredFeatureTest, ExistingFeatureTestCase&lt;/em&gt; before integrating the new feature, then in the order &lt;em&gt;ConfiguredFeatureTest, NewFeatureTestCase, ExistingFeatureTestCase.&lt;/em&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfiguredFeatureTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;anything&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_configured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIsNotNone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExistingFeatureTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;existing_feature&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewFeatureTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;anything&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_new_feature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;our_new_feature&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to understand the behaviour of the existing test, we ran it alone, both with and without the new changes. It appeared that the test was failing in both cases. This gave us the information that this test was using an existing global state, and that we might be cleaning this state. So we took a deeper interest in the &lt;em&gt;tearDown&lt;/em&gt; method.&lt;/p&gt;
&lt;p&gt;It happened that the global configuration was injected and cleared in our new test suite. This configuration was used but rarely cleared in other tests. As a result, the existing test was relying on the execution of the previous ones to succeed. Clearing the configuration removed the context required by the existing test, thus made it fail.&lt;/p&gt;
&lt;p&gt;By “chance” the tests were always run in the right order for years. This situation could have been detected way earlier by using a random execution order for tests. &lt;a class="reference external" href="https://github.com/pytest-dev/pytest-randomly"&gt;It happens that python has simple modules to do so&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To fix the tests and avoid this situation to happen in the future, we decided to force the configuration clearing in the project’s test suite superclass. This meant to fix a bunch of other tests failing after this but also enforced a clean state for all new tests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bonus-story-a-good-flakiness"&gt;
&lt;h3&gt;Bonus story: A good flakiness&lt;/h3&gt;
&lt;p&gt;On top of the previous stories, where flakiness is obviously a bad thing, I also stumbled into a case where I found flakiness somehow beneficial to the codebase.&lt;/p&gt;
&lt;p&gt;In this particular case, the test intended to assert some data consistency for any instances of the same class. To do so, the test was generating numerous instances of the class with randomized inputs.&lt;/p&gt;
&lt;p&gt;This test happened to fail during some executions as the inputs were creating a behaviour not accounted for by the feature. That enabled to extract a specific test case for the input and fix the behaviour in this case.&lt;/p&gt;
&lt;p&gt;While I agree that edge cases should be analyzed during the development process, sometimes the input scope is too wide to consider all of them, let alone test all possibilities.&lt;/p&gt;
&lt;p&gt;In those cases, randomizing the input of a method that should keep a consistent output is a good way to assert the codebase sanity in the long run.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article showed some real-life examples of flaky tests. They were not the worst to track down, but they pinpoint the fact that flakiness can resurface at any time, even years after their introduction!&lt;/p&gt;
&lt;p&gt;Once they appear, the flaky tests need to be fixed as soon as possible out of fear that the failing test suite will be considered as a normal state. The developers may then not rely on the tests suites anymore.&lt;/p&gt;
&lt;p&gt;Flakiness is mostly due to non-deterministic behaviour in the code, in this article we had an example of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Specific execution time&lt;/em&gt;. If the code is dependent on time, there may be failing tests at specific dates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Randomness.&lt;/em&gt; Using random values in the main code or in the tests needs extra care or the behaviour may vary depending on those random values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Modified global state.&lt;/em&gt; Using a global state in a project can create inconsistencies in tests if the state is not managed correctly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some behaviour can help to limit the amount of flakiness that hides in the tests, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Control your test execution environment&lt;/em&gt; to keep reproducible execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Avoid global states&lt;/em&gt; to minimize the side effects of environment settings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Randomize the test execution order&lt;/em&gt; to determine dependencies between tests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="continue-on-the-subject"&gt;
&lt;h3&gt;Continue on the subject:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://hackernoon.com/flaky-tests-a-war-that-never-ends-9aa32fdef359"&gt;https://hackernoon.com/flaky-tests-a-war-that-never-ends-9aa32fdef359&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://martinfowler.com/articles/nonDeterminism.html"&gt;https://martinfowler.com/articles/nonDeterminism.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/stable/flaky.html"&gt;https://docs.pytest.org/en/stable/flaky.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are curious about the context that led to the apparition of those flaky tests, my former manager &lt;a class="reference external" href="https://kevin.deldycke.com/"&gt;Kevin Deldycke&lt;/a&gt; provides a more detailed view in a very interesting post: &lt;a class="reference external" href="https://kevin.deldycke.com/2020/10/billing-pipeline-critical-time-sensitive-system/"&gt;&lt;em&gt;Billing Pipeline: A Critical Time Sensitive System&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</content><category term="Software Engineering"></category><category term="Testing"></category><category term="Best Practice"></category></entry><entry><title>About design patterns: Dependency Injection</title><link href="https://aveuiller.github.io/about_design_patterns-dependency_injection.html" rel="alternate"></link><published>2020-01-05T00:00:00+01:00</published><updated>2020-01-05T00:00:00+01:00</updated><author><name>Antoine Veuiller</name></author><id>tag:aveuiller.github.io,2020-01-05:/about_design_patterns-dependency_injection.html</id><summary type="html">&lt;p&gt;A walk through dependency injection&lt;/p&gt;</summary><content type="html">&lt;section id="availability-disclaimer"&gt;
&lt;h2&gt;Availability Disclaimer&lt;/h2&gt;
&lt;p&gt;This article can be found on other sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Medium: &lt;a class="reference external" href="https://medium.com/&amp;#64;aveuiller/about-design-patterns-dependency-injection-ab9c1742d4aa"&gt;link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;img alt="credit photo: Bamboo Complexity, taufuuu" src="/images/posts/2020-01-05_About-design-patterns--Dependency-Injection/bamboo_complexity.jpeg" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-dependency-injection"&gt;
&lt;h2&gt;What is dependency injection?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Dependency injection&lt;/em&gt; (DI) is a very simple concept that aims to decouple components of your software and ease their integration and testing. It does so by asking for their sub-components instead of creating them.&lt;/p&gt;
&lt;p&gt;During this article, we will also mention &lt;em&gt;inversion of control&lt;/em&gt; (IoC), which is commonly used along with dependency injection. This pattern aims to avoid asking for implementations but rather interfaces while injecting dependencies.&lt;/p&gt;
&lt;p&gt;This article will use a simple example in Java to present dependency injection but aims towards a technology-agnostic explanation of the concept and its advantages. Moreover, even if it is an object-oriented design pattern, you can still adapt the behaviour in many programming languages.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lets-clarify-all-this-using-an-example"&gt;
&lt;h2&gt;Let’s clarify all this using an example!&lt;/h2&gt;
&lt;p&gt;We will present a weather service that shows an intelligible representation of the weather. In the current implementation, we rely solely on a thermometer.&lt;/p&gt;
&lt;section id="lets-start-without-dependency-injection"&gt;
&lt;h3&gt;Let’s start without dependency injection.&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Weather service without IoC" src="https://raw.githubusercontent.com/aveuiller/design-tutorials/master/dependencyinjection/specs/classes_without_ioc.svg" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see on the diagram, the &lt;em&gt;WeatherService&lt;/em&gt; is relying on a &lt;em&gt;Thermometer&lt;/em&gt;, which can be configured with a &lt;em&gt;TemperatureUnit&lt;/em&gt;.
Not using dependency injection will result in a code creating a new instance of &lt;em&gt;Thermometer&lt;/em&gt; in the service, and a &lt;em&gt;Thermometer&lt;/em&gt; configuring the &lt;em&gt;TemperatureUnit&lt;/em&gt; to use:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class Thermometer {
  private final TemperatureUnit unit;
  
  public Thermometer() {
    this.unit = TemperatureUnit.CELSIUS;
  }
}

public class WeatherService implements WeatherContract {

  private final Thermometer thermometer;
 
  // This constructor is not using dependency injection
  public WeatherService() {
    this.thermometer = new Thermometer();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s imagine that we want to use a &lt;em&gt;Thermometer&lt;/em&gt; configured to use Fahrenheit degrees instead of Celsius. For this, we add a parameter to switch between both units.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public Thermometer(boolean useCelsius) {
  if (useCelsius) {
    this.unit = TemperatureUnit.CELSIUS;
  } else {
    this.unit = TemperatureUnit.FAHRENHEIT;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can also argue that the user of our program won’t always have access to an actual thermometer on their device, thus you may want to be able to fall back to another implementation in this case.
For instance, an API sending the current temperature in your area. Integrating multiple implementations inside the service could be done as shown below.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public WeatherService(boolean useRealDevice, 
                      boolean useCelsius,
                      String apiKey) {
  if (useRealDevice) {
    this.thermometer = new Thermometer(useCelsius);
  } else {
    this.thermometer = new ThermometerWebService(useCelsius, apiKey);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, initializing the service can be done as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public static void main(String[] args) {
  // Not using dependency injection
  WeatherContract weather = new WeatherService(true, true, null);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even if it is easy to use, our current version of the &lt;em&gt;WeatherService&lt;/em&gt; is not evolutive. If we take a closer look at its constructor, we can see multiple design flaws that will haunt us in the long run:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The constructor is choosing its &lt;em&gt;Thermometer&lt;/em&gt;. Adding a new type of Thermometer would require some parameter tricks to guess the implementation to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The constructor is managing the &lt;em&gt;Thermometer&lt;/em&gt; constructor parameters. Adding the &lt;em&gt;ThermometerWebService&lt;/em&gt; forced us to add a new &lt;em&gt;apiKey&lt;/em&gt; parameter to it, even if unrelated to the &lt;em&gt;WeatherService&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, any change to any &lt;em&gt;Thermometer&lt;/em&gt; implementation may require changes on the &lt;em&gt;WeatherService&lt;/em&gt; constructors. This behaviour is unwanted and breaks the &lt;em&gt;Separation of Concerns&lt;/em&gt; principle.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="will-dependency-injection-improve-my-project"&gt;
&lt;h3&gt;Will dependency injection improve my project?&lt;/h3&gt;
&lt;p&gt;Dependency injection, associated with inversion of control, is a good way to cover this use case. It allows you to choose which kind of thermometer you want in your program depending on the situation. The following diagram gives a quick overview of our new architecture:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Weather service using IoC" src="https://raw.githubusercontent.com/aveuiller/design-tutorials/master/dependencyinjection/specs/classes_using_ioc.svg" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;inversion of control&lt;/strong&gt; is represented in this diagram by the fact that our &lt;em&gt;WeatherService&lt;/em&gt; implementation is linked to &lt;em&gt;ThermometerContract&lt;/em&gt; rather than any of its implementations. That’s nothing more than this.&lt;/p&gt;
&lt;p&gt;As for &lt;strong&gt;dependency injection&lt;/strong&gt;, &lt;em&gt;WeatherService&lt;/em&gt; will now take a &lt;em&gt;ThermometerContract&lt;/em&gt; in its constructor, requiring the block using the service to build an instance filling this contract:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class WeatherService implements WeatherContract {
  // We now use the Interface   
  private final ThermometerContract thermometer;

  // New constructor using dependency injection    
  public WeatherService(ThermometerContract thermometer) {
    this.thermometer = thermometer;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, the initialization of a &lt;em&gt;WeatherService&lt;/em&gt; for both constructors will look like the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public static void main(String[] args) {
  // Using dependency injection
  TemperatureUnit celsius = TemperatureUnit.CELSIUS;
  ThermometerContract thermometer = new Thermometer(celsius);
  WeatherContract weather = new WeatherService(thermometer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, our &lt;em&gt;ThermometerContract&lt;/em&gt; can be fully configured by an external part of the software. More important so, the &lt;em&gt;WeatherService&lt;/em&gt; doesn’t need to know any of the available implementations of &lt;em&gt;ThermometerContract&lt;/em&gt;, thus decoupling your software packages.&lt;/p&gt;
&lt;p&gt;This could seem like nothing important, but this simple switch of responsibility is critical leverage for multiple aspects of software design. It enables you to control the instance creation from your software entry point by chaining dependencies. You won’t have to take care of the instantiation until it is necessary. This behaviour could be compared to raised exceptions, that are ignored until taken care of in a significant context.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="thats-all-there-is-to-dependency-injection"&gt;
&lt;h2&gt;That’s all there is to dependency injection?&lt;/h2&gt;
&lt;p&gt;It is important to know that even if you can find libraries that help you manage your dependency injection, it is not always necessary to use them.&lt;/p&gt;
&lt;p&gt;Those libraries tend to cover a lot of cases thus be offputting to developers not comfortable with the pattern in the first place. In reality, they simply ease the instantiation of complex dependency trees and are not required at all.&lt;/p&gt;
&lt;p&gt;The following section is an example of injecting our service using &lt;a class="reference external" href="https://github.com/google/guice/wiki"&gt;Guice&lt;/a&gt;, a dependency injection framework for Java made by Google. The concept is to reference bindings of every component you can inject in your program, so that the library can generate a class of any type, automatically.&lt;/p&gt;
&lt;p&gt;Let’s consider that we have two implementations with the following constructors:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class WeatherService implements WeatherContract {
  private final ThermometerContract thermometer;

  &amp;#64;Inject
  public WeatherService(ThermometerContract thermometer) {
    this.thermometer = thermometer;
  }
}

public class Thermometer implements ThermometerContract {
  private final TemperatureUnit unit;
  
  &amp;#64;Inject
  public Thermometer(&amp;#64;Named(WeatherModule.TEMPERATURE_UNIT) 
                     TemperatureUnit unit) {
    this.unit = unit;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;injection module&lt;/em&gt; should be configured to bind all needed interfaces to a given implementation.
It should also be able to inject any object without a specific interface, such as the enumerate &lt;em&gt;TemperatureUnit&lt;/em&gt;.
The injection will then be bound to a specific name, “&lt;em&gt;temp_unit”&lt;/em&gt; in this case.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public class WeatherModule extends AbstractModule {
  public static final String TEMPERATURE_UNIT = &amp;quot;temp_unit&amp;quot;;

  &amp;#64;Override
  protected void configure() {
    // Named input configuration bindings
    bind(TemperatureUnit.class)
      .annotatedWith(Names.named(TEMPERATURE_UNIT))
      .toInstance(TemperatureUnit.CELSIUS);
      
    // Interface - Implementation bindings
    bind(ThermometerContract.class).to(Thermometer.class);
    bind(WeatherContract.class).to(WeatherService.class);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately, the module can be used as follow, here instantiating a &lt;em&gt;WeatherContract&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public static void main(String[] args) {
  // Creating the injection module configured above.
  Injector injector = Guice.createInjector(new WeatherModule());

  // We ask for the injection of a WeatherContract, 
  // which will create an instance of ThermometerContract
  // with the named TemperatureUnit under the hood.
  WeatherContract weather = injector.getInstance(WeatherContract.class);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such modules usually provide a good power of customization to the injected elements, thus we can consider configuring the injection depending on the available implementations.&lt;/p&gt;
&lt;p&gt;As a result, using a library is not required when integrating dependency injection. However, this could save a lot of time and cumbersome code in big projects.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="show-me-some-tests"&gt;
&lt;h2&gt;Show me some tests!&lt;/h2&gt;
&lt;p&gt;As a side effect of decoupling your code, the dependency injection pattern is a real asset to improve unit testability of each component. This section contains an example of unit tests for our &lt;em&gt;WeatherService&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As said above, making &lt;em&gt;WeatherService&lt;/em&gt; asking for a &lt;em&gt;ThermometerContract&lt;/em&gt; enables us to use any implementation we want. Hence, we can send a &lt;em&gt;mock&lt;/em&gt; in the constructor, then control its behaviour from the outside.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;public void testTemperatureStatus() {
  ThermometerContract thermometer = Mockito.mock(ThermometerContract.class);
  Mockito.doReturn(TemperatureUnit.CELSIUS).when(thermometer).getUnit();
  WeatherContract weather = new WeatherService(thermometer);
  
  Mockito.doReturn(-50f).when(thermometer).getTemperature();
  assertEquals(
    TemperatureStatus.COLD,
    weather.getTemperatureStatus()
  );
  
  Mockito.doReturn(10f).when(thermometer).getTemperature();
  assertEquals(
    TemperatureStatus.MODERATE,
    weather.getTemperatureStatus()
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we can then control our thermometer without a struggle from outside our tested class.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Dependency injection&lt;/em&gt; is a way of thinking your code architecture and can be simple to implement by yourself. In bigger projects, integrating a dependency injection framework can save you a lot of time in the long run.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dependency injection&lt;/em&gt; provides multiple non-negligible advantages such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Code decoupling&lt;/em&gt;: use the contracts and ignore implementation specificities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Enhanced testability&lt;/em&gt;: Unit tests almost become a pleasure to write.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Configurability&lt;/em&gt;: you can more easily swap injected instances.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/aveuiller/design-tutorials"&gt;You can find the full code example in my design tutorials repository on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</content><category term="Software Engineering"></category><category term="Design Patterns"></category><category term="Best Practice"></category><category term="Software Architecture"></category></entry></feed>